<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add New Product | Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.js"></script>
    <style>
        #cropperModal {
            z-index: 9999;
        }
        .modal-container {
            height: 90vh;
            max-height: 90vh;
            max-width: 90vw;
            width: 700px;
            margin: 0 auto;
            display: flex;
            flex-direction: column;
        }
        .cropper-area {
            flex: 1;
            min-height: 300px;
            max-height: calc(90vh - 120px);
            width: 100%;
            position: relative;
            background: #f3f4f6;
            overflow: hidden;
        }
        #cropperImage {
            max-height: 100%;
            max-width: 100%;
        }
        .modal-footer {
            padding: 1rem;
            border-top: 1px solid #e5e7eb;
            flex-shrink: 0;
        }
        .cropper-container {
            max-height: 100% !important;
        }
        
        /* Animations */
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        .animate-fade-in {
            animation: fadeIn 0.3s ease-out forwards;
        }
        
        @keyframes pulse-border {
            0% { box-shadow: 0 0 0 0 rgba(99, 102, 241, 0.4); }
            70% { box-shadow: 0 0 0 6px rgba(99, 102, 241, 0); }
            100% { box-shadow: 0 0 0 0 rgba(99, 102, 241, 0); }
        }
        .pulse-border:focus {
            animation: pulse-border 2s infinite;
        }
        
        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #f1f5f9;
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb {
            background: #cbd5e1;
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #94a3b8;
        }
    </style>
</head>
<body class="bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen">
    <div class="container mx-auto px-4 py-10 max-w-6xl">
        <!-- Header Section -->
        <div class="mb-8 flex flex-col md:flex-row md:items-center md:justify-between">
            <div class="mb-4 md:mb-0">
                <h1 class="text-3xl font-extrabold text-gray-800 tracking-tight">Add New Product</h1>
                <p class="text-gray-600 mt-2 max-w-2xl">Create a new product listing with detailed information and high-quality images to showcase your inventory</p>
            </div>
            <div class="flex space-x-3">
                <a href="/admin/products" class="px-5 py-2.5 border-2 border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-all duration-300 flex items-center space-x-2 shadow-sm hover:shadow">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                    </svg>
                    <span>Back to Products</span>
                </a>
                <div class="bg-indigo-100 p-2.5 rounded-lg shadow-sm hover:shadow-md transition-all duration-300 cursor-pointer">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                    </svg>
                </div>
            </div>
        </div>
        
        <!-- Form Card -->
        <div class="bg-white rounded-2xl shadow-xl overflow-hidden border-2 border-gray-200 hover:border-indigo-200 transition-all duration-300">
            <div class="bg-gradient-to-r from-indigo-600 to-purple-600 h-2"></div>
            <form id="productForm" class="space-y-8 p-8">
                <!-- Basic Product Info Section -->
                <div class="space-y-6">
                    <div class="flex items-center space-x-3 mb-2">
                        <div class="h-10 w-10 rounded-full bg-indigo-100 flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                            </svg>
                        </div>
                        <h2 class="text-xl font-bold text-gray-800">Product Information</h2>
                    </div>
                    <div class="bg-indigo-50 p-4 rounded-xl border-2 border-indigo-100 mb-6">
                        <div class="flex items-center text-indigo-700">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <p class="text-sm">All fields marked with * are required</p>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="name" class="block text-sm font-medium text-gray-700 mb-2">Product Name*</label>
                            <input type="text" id="name" name="name" required 
                                   class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 pulse-border placeholder-gray-400 transition-all duration-300">
                        </div>
                    </div>

                    <!-- Description -->
                    <div>
                        <label for="description" class="block text-sm font-medium text-gray-700 mb-2">Description*</label>
                        <textarea id="description" name="description" rows="4" required
                                  class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 pulse-border placeholder-gray-400 transition-all duration-300"></textarea>
                        <p class="mt-1 text-xs text-gray-500">Provide a detailed description of your product including features, materials, and usage instructions.</p>
                    </div>

                    <!-- Category and Brand -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="category" class="block text-sm font-medium text-gray-700 mb-2">Category*</label>
                            <div class="relative">
                                <select id="category" name="category" required class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 pulse-border placeholder-gray-400 transition-all duration-300 appearance-none bg-white pr-10">
                                    <option value="">Select a category</option>
                                    <% categories.forEach(function(category) { %>
                                        <option value="<%= category._id %>"><%= category.name %></option>
                                    <% }); %>
                                </select>
                                <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                                    <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                    </svg>
                                </div>
                            </div>
                        </div>

                        <div>
                            <label for="brand" class="block text-sm font-medium text-gray-700 mb-2">Brand*</label>
                            <div class="relative">
                                <select id="brand" name="brand" class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 pulse-border placeholder-gray-400 transition-all duration-300 appearance-none bg-white pr-10">
                                    <option value="">Select a brand</option>
                                    <% brands.forEach(function(brands) { %>
                                        <option value="<%= brands._id %>"><%= brands.name %></option>
                                    <% }); %>
                                </select>
                                <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                                    <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                                    </svg>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Variants</label>
                            
                            <div id="variantsContainer" class="space-y-2 mt-2">
                              <!-- Variant rows will be added here -->
                            </div>
                          
                            <button type="button" id="addVariantBtn" class="mt-2 px-3 py-1 bg-green-500 text-white rounded">
                              + Add Variant
                            </button>
                          
                            <% if (validationErrors?.variants) { %>
                              <p class="text-red-500 text-xs mt-1"><%= validationErrors.variants %></p>
                            <% } %>
                          </div>
                          
                    </div>
                </div>

                <!-- Images Section -->
                <div class="space-y-6 pt-6 border-t-2 border-gray-100">
                    <div class="flex items-center space-x-3 mb-2">
                        <div class="h-10 w-10 rounded-full bg-indigo-100 flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                        </div>
                        <h2 class="text-xl font-bold text-gray-800">Product Images</h2>
                    </div>
                    
                    <!-- Main Image -->
                    <div class="bg-gradient-to-r from-indigo-50 to-purple-50 p-6 rounded-xl border-2 border-indigo-100 shadow-md hover:shadow-lg transition-all duration-300">
                        <div class="flex items-center justify-between mb-4">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-800">Main Image</h3>
                                <p class="text-sm text-gray-500">This will be the featured image for your product</p>
                            </div>
                            <div class="flex items-center space-x-2">
                                <span id="mainFileCount" class="text-sm font-medium text-gray-500 bg-white px-3 py-1 rounded-full shadow-sm border-2 border-gray-200">No image selected</span>
                                <div class="h-2 w-2 rounded-full bg-red-400"></div>
                                <span class="text-xs text-gray-500 font-medium">Required</span>
                            </div>
                        </div>
                        
                        <input type="file" id="mainImageUpload" accept="image/*" class="hidden" />
                        <div class="flex items-center space-x-4">
                            <button type="button" onclick="document.getElementById('mainImageUpload').click()" 
                                    class="px-6 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-lg hover:from-indigo-700 hover:to-purple-700 transition-all duration-300 flex items-center space-x-2 shadow-md transform hover:scale-105">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                </svg>
                                <span>Select Main Image</span>
                            </button>
                        </div>
                        <div id="mainPreviewContainer" class="mt-6"></div>
                    </div>
                    
                    <!-- Sub Images -->
                    <div class="bg-gradient-to-r from-purple-50 to-indigo-50 p-6 rounded-xl border-2 border-purple-100 shadow-md hover:shadow-lg transition-all duration-300">
                        <div class="flex items-center justify-between mb-4">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-800">Additional Images</h3>
                                <p class="text-sm text-gray-500">Upload 3 or more images to showcase your product</p>
                            </div>
                            <div class="flex items-center space-x-2">
                                <span id="subFileCount" class="text-sm font-medium text-gray-500 bg-white px-3 py-1 rounded-full shadow-sm border-2 border-gray-200">No images selected</span>
                                <div class="h-2 w-2 rounded-full bg-red-400"></div>
                                <span class="text-xs text-gray-500 font-medium">Min. 3 required</span>
                            </div>
                        </div>
                        
                        <input type="file" id="subImageUpload" accept="image/*" multiple class="hidden" />
                        <div class="flex items-center space-x-4">
                            <button type="button" onclick="document.getElementById('subImageUpload').click()" 
                                    class="px-6 py-3 bg-white border-2 border-indigo-500 text-indigo-600 rounded-lg hover:bg-indigo-50 transition-all duration-300 flex items-center space-x-2 shadow-md transform hover:scale-105">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                </svg>
                                <span>Select Multiple Images</span>
                            </button>
                        </div>
                        <div id="subPreviewContainer" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mt-6"></div>
                    </div>
                </div>

                <!-- Form Actions -->
                <div class="flex items-center justify-between space-x-4 pt-6 border-t-2 border-gray-200">
                    <div class="text-sm text-gray-500">
                        <span class="text-red-500">*</span> Required fields
                    </div>
                    <div class="flex space-x-3">
                        <button type="button" class="px-6 py-3 border-2 border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-all duration-300 shadow-sm hover:shadow">
                            Cancel
                        </button>
                        <button type="submit" id="submitBtn" 
                                class="px-8 py-3 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-lg hover:from-green-600 hover:to-emerald-700 transition-all duration-300 flex items-center space-x-2 shadow-md transform hover:scale-105">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                            </svg>
                            <span>Add Product</span>
                        </button>
                    </div>
                </div>
            </form>
        </div>
        

    <!-- Improved Cropper Modal -->
    <div id="cropperModal" class="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center hidden backdrop-blur-sm">
        <div class="bg-white rounded-xl shadow-2xl modal-container transform transition-all">
            <div class="p-5 border-b-2 border-gray-200 bg-gray-50 rounded-t-xl flex items-center justify-between">
                <div>
                    <h3 class="text-lg font-semibold text-gray-800">Crop Image</h3>
                    <p class="text-sm text-gray-500 mt-1">Adjust the crop area as needed</p>
                </div>
                <button id="closeModal" class="text-gray-400 hover:text-gray-500 transition-colors duration-300">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            
            <div class="cropper-area">
                <img id="cropperImage" src="/placeholder.svg" alt="Image to crop" class="max-h-full mx-auto" />
            </div>
            
            <div class="modal-footer flex justify-between bg-gray-50 rounded-b-xl">
                <button type="button" id="cancelCrop" class="px-6 py-2.5 bg-white border-2 border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-all duration-300 shadow-sm">
                    Cancel
                </button>
                <button type="button" id="applyCrop" class="px-6 py-2.5 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-lg hover:from-indigo-700 hover:to-purple-700 transition-all duration-300 shadow-md transform hover:scale-105">
                    Apply Crop
                </button>
            </div>
        </div>
    </div>

    <!-- Toast Notifications -->
    <div id="toastContainer" class="fixed bottom-6 right-6 space-y-3 z-50"></div>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
    // Debug function to check if dependencies are loaded
    console.log('Cropper.js loaded:', typeof Cropper !== 'undefined');
    
    // Check if Cropper.js is loaded
    if (typeof Cropper === 'undefined') {
        console.error('Cropper.js not loaded!');
        alert('Image editor failed to load. Please refresh the page and try again.');
        return;
    }

    // Elements
    const cropperModal = document.getElementById('cropperModal');
    const cropperImage = document.getElementById('cropperImage');
    const cancelCropBtn = document.getElementById('cancelCrop');
    const applyCropBtn = document.getElementById('applyCrop');
    const closeModalBtn = document.getElementById('closeModal');
    
    // Form elements
    const productForm = document.getElementById('productForm');
    const submitBtn = document.getElementById('submitBtn');
    const cancelBtn = document.querySelector('button[type="button"][class*="border-gray-300"]');
    
    // New variables for main/sub images
    let mainFile = null;
    let mainCroppedImage = null;
    let subFiles = [];
    let subCroppedImages = [];
    let currentFile = null; // Track which file is being cropped
    let cropper = null;     // Cropper instance

    // Toast notification function
    function showToast(message, type = 'success') {
        console.log(`Toast: ${message}, type: ${type}`);
        
        const toastContainer = document.getElementById('toastContainer');
        if (!toastContainer) {
            const newToastContainer = document.createElement('div');
            newToastContainer.id = 'toastContainer';
            newToastContainer.className = 'fixed bottom-4 right-4 z-50 flex flex-col space-y-2';
            document.body.appendChild(newToastContainer);
        }
        
        const toast = document.createElement('div');
        toast.className = `px-5 py-3 rounded-lg shadow-lg text-white flex items-start space-x-3 max-w-xs animate-fade-in ${type === 'success' ? 'bg-gradient-to-r from-green-500 to-emerald-600' : 'bg-gradient-to-r from-red-500 to-pink-600'}`;
        
        const icon = document.createElement('div');
        icon.className = 'flex-shrink-0';
        icon.innerHTML = type === 'success' ? 
            '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" /></svg>' :
            '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" /></svg>';
        
        const content = document.createElement('div');
        content.className = 'text-sm';
        content.textContent = message;
        
        toast.appendChild(icon);
        toast.appendChild(content);
        
        document.getElementById('toastContainer').appendChild(toast);
        setTimeout(() => {
            toast.classList.add('opacity-0');
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }

    // Cropper functions
    function initializeCropper() {
        try {
            cropper = new Cropper(cropperImage, {
                aspectRatio: 1,
                viewMode: 1,
                autoCropArea: 0.8,
                zoomable: true,
                cropBoxMovable: true,
                cropBoxResizable: true,
                toggleDragModeOnDblclick: true,
                checkCrossOrigin: false,
                ready: function() {
                    const containerData = this.cropper.getContainerData();
                    const cropBoxWidth = Math.min(containerData.width, 600);
                    const cropBoxHeight = Math.min(containerData.height, 600);
                    
                    this.cropper.setCropBoxData({
                        width: cropBoxWidth,
                        height: cropBoxHeight
                    });
                }
            });
        } catch (error) {
            console.error('Cropper initialization error:', error);
            showToast('Failed to initialize image editor', 'error');
        }
    }
    
    function destroyCropper() {
        if (cropper) {
            try {
                cropper.destroy();
            } catch (e) {
                console.error('Error destroying cropper:', e);
            }
            cropper = null;
        }
    }

    function closeCropper() {
        destroyCropper();
        cropperModal.classList.add('hidden');
        document.body.style.overflow = '';
    }

    function updateMainPreview(imageUrl) {
        const previewContainer = document.getElementById('mainPreviewContainer');
        const img = previewContainer.querySelector('img');
        if (img) {
            img.src = imageUrl;
        }
    }

    // Close modal button
    if (closeModalBtn) {
        closeModalBtn.addEventListener('click', closeCropper);
    }

    // Main Image Handling
    const mainImageUpload = document.getElementById('mainImageUpload');
    if (mainImageUpload) {
        mainImageUpload.addEventListener('change', function() {
            if (!this.files || this.files.length === 0) return;
            
            mainFile = this.files[0];
            
            const mainFileCount = document.getElementById('mainFileCount');
            if (mainFileCount) {
                mainFileCount.textContent = '1 image selected';
                mainFileCount.classList.add('bg-green-100', 'text-green-800', 'border-green-300');
                mainFileCount.classList.remove('bg-white', 'text-gray-500', 'border-gray-200');
            }
            
            // Show preview
            const previewContainer = document.getElementById('mainPreviewContainer');
            if (!previewContainer) return;
            
            previewContainer.innerHTML = '';
            
            const preview = document.createElement('div');
            preview.className = 'border-2 border-gray-200 rounded-lg p-4 bg-white shadow-md hover:shadow-lg transition-all duration-300 transform hover:scale-102';
            
            const imgContainer = document.createElement('div');
            imgContainer.className = 'relative';
            
            const img = document.createElement('img');
            img.className = 'w-full h-64 object-contain rounded-lg border-2 border-gray-200';
            img.alt = 'Main image preview';
            
            const reader = new FileReader();
            reader.onload = function(e) {
                img.src = e.target.result;
            };
            reader.readAsDataURL(mainFile);
            
            const buttonsContainer = document.createElement('div');
            buttonsContainer.className = 'mt-4 flex space-x-3';
            
            const cropBtn = document.createElement('button');
            cropBtn.type = 'button';
            cropBtn.className = 'flex-1 py-2 bg-indigo-100 text-indigo-700 rounded-lg text-sm font-medium hover:bg-indigo-200 transition-all duration-300 flex items-center justify-center space-x-2 border-2 border-indigo-200';
            cropBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" /></svg><span>Crop Image</span>';
            cropBtn.onclick = () => openCropper(mainFile, 'main');
            
            const removeBtn = document.createElement('button');
            removeBtn.type = 'button';
            removeBtn.className = 'flex-1 py-2 bg-red-100 text-red-700 rounded-lg text-sm font-medium hover:bg-red-200 transition-all duration-300 flex items-center justify-center space-x-2 border-2 border-red-200';
            removeBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg><span>Remove</span>';
            removeBtn.onclick = () => {
                mainFile = null;
                mainCroppedImage = null;
                previewContainer.innerHTML = '';
                if (mainFileCount) {
                    mainFileCount.textContent = 'No image selected';
                    mainFileCount.classList.remove('bg-green-100', 'text-green-800', 'border-green-300');
                    mainFileCount.classList.add('bg-white', 'text-gray-500', 'border-gray-200');
                }
            };
            
            buttonsContainer.appendChild(cropBtn);
            buttonsContainer.appendChild(removeBtn);
            imgContainer.appendChild(img);
            preview.appendChild(imgContainer);
            preview.appendChild(buttonsContainer);
            previewContainer.appendChild(preview);
        });
    }

    // Sub Images Handling
    const subImageUpload = document.getElementById('subImageUpload');
    if (subImageUpload) {
        subImageUpload.addEventListener('change', function() {
            if (!this.files || this.files.length === 0) return;
            
            const newFiles = Array.from(this.files);
            
            if (subFiles.length + newFiles.length > 10) {
                showToast('Maximum 10 sub images allowed', 'error');
                return;
            }
            
            subFiles = subFiles.concat(newFiles);
            while (subCroppedImages.length < subFiles.length) {
                subCroppedImages.push(null);
            }
            
            const subFileCount = document.getElementById('subFileCount');
            if (subFileCount) {
                subFileCount.textContent = `${subFiles.length} images selected`;
                if (subFiles.length >= 3) {
                    subFileCount.classList.add('bg-green-100', 'text-green-800', 'border-green-300');
                    subFileCount.classList.remove('bg-white', 'text-gray-500', 'border-gray-200');
                }
            }
            
            refreshSubPreviews();
            
            if (subFiles.length < 3) {
                showToast('Please select at least 3 sub images', 'error');
            }
            
            this.value = '';
        });
    }

    function refreshSubPreviews() {
        const container = document.getElementById('subPreviewContainer');
        if (!container) return;
        
        container.innerHTML = '';
        
        subFiles.forEach((file, index) => {
            const preview = document.createElement('div');
            preview.className = 'border-2 border-gray-200 rounded-lg p-4 bg-white shadow-md hover:shadow-lg transition-all duration-300 transform hover:scale-102';
            preview.dataset.index = index;
            
            const imgContainer = document.createElement('div');
            imgContainer.className = 'relative h-40';
            
            const status = document.createElement('div');
            status.className = `absolute top-3 right-3 px-2 py-1 rounded-full text-xs font-medium ${subCroppedImages[index] ? 'bg-green-100 text-green-800 border-2 border-green-300' : 'bg-yellow-100 text-yellow-800 border-2 border-yellow-300'}`;
            status.textContent = subCroppedImages[index] ? 'Cropped' : 'Original';
            
            const img = document.createElement('img');
            img.className = 'w-full h-full object-contain rounded-lg border-2 border-gray-200';
            img.alt = `Sub image ${index + 1}`;
            
            const reader = new FileReader();
            reader.onload = function(e) {
                img.src = e.target.result;
            };
            reader.readAsDataURL(file);
            
            const buttonsContainer = document.createElement('div');
            buttonsContainer.className = 'mt-3 flex space-x-2';
            
            const cropBtn = document.createElement('button');
            cropBtn.type = 'button';
            cropBtn.className = 'flex-1 py-1.5 bg-indigo-100 text-indigo-700 rounded-lg text-xs font-medium hover:bg-indigo-200 transition-all duration-300 border-2 border-indigo-200';
            cropBtn.textContent = 'Crop';
            cropBtn.onclick = () => openCropper(file, 'sub', index);
            
            const removeBtn = document.createElement('button');
            removeBtn.type = 'button';
            removeBtn.className = 'flex-1 py-1.5 bg-red-100 text-red-700 rounded-lg text-xs font-medium hover:bg-red-200 transition-all duration-300 border-2 border-red-200';
            removeBtn.textContent = 'Remove';
            removeBtn.onclick = () => {
                subFiles.splice(index, 1);
                subCroppedImages.splice(index, 1);
                const subFileCount = document.getElementById('subFileCount');
                if (subFileCount) {
                    subFileCount.textContent = `${subFiles.length} images selected`;
                    if (subFiles.length < 3) {
                        subFileCount.classList.remove('bg-green-100', 'text-green-800', 'border-green-300');
                        subFileCount.classList.add('bg-white', 'text-gray-500', 'border-gray-200');
                    }
                }
                refreshSubPreviews();
            };
            
            buttonsContainer.appendChild(cropBtn);
            buttonsContainer.appendChild(removeBtn);
            imgContainer.appendChild(status);
            imgContainer.appendChild(img);
            preview.appendChild(imgContainer);
            preview.appendChild(buttonsContainer);
            container.appendChild(preview);
        });
    }

    function openCropper(file, type, index = null) {
        currentFile = { file, type, index };
        
        // Destroy previous cropper if exists
        destroyCropper();
        
        // Show modal
        if (!cropperModal) {
            console.error('Cropper modal not found in the DOM');
            showToast('Cropper modal not found', 'error');
            return;
        }
        
        cropperModal.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
        
        const reader = new FileReader();
        reader.onload = function(e) {
            if (cropperImage) {
                cropperImage.src = e.target.result;
                setTimeout(() => initializeCropper(), 50);
            } else {
                console.error('Cropper image element not found');
                showToast('Cropper image element not found', 'error');
                closeCropper();
            }
        };
        reader.onerror = function() {
            showToast('Failed to read image file', 'error');
            closeCropper();
        };
        reader.readAsDataURL(file);
    }

    // Handle Apply Crop
    if (applyCropBtn) {
        applyCropBtn.addEventListener('click', function() {
            if (!cropper) {
                showToast('Editor not ready', 'error');
                return;
            }
            
            try {
                const canvas = cropper.getCroppedCanvas({
                    width: 800,
                    height: 800,
                    imageSmoothingEnabled: true,
                    imageSmoothingQuality: 'high'
                });
                
                canvas.toBlob(function(blob) {
                    const imageUrl = URL.createObjectURL(blob);
                    const fileName = `cropped-${Date.now()}.jpg`;
                    
                    if (currentFile.type === 'main') {
                        mainCroppedImage = { blob, name: fileName };
                        updateMainPreview(imageUrl);
                    } else {
                        subCroppedImages[currentFile.index] = { blob, name: fileName };
                        refreshSubPreviews();
                    }
                    
                    showToast('Image cropped successfully');
                    closeCropper();
                }, 'image/jpeg', 0.9);
            } catch (error) {
                console.error('Error during crop:', error);
                showToast('Failed to crop image', 'error');
            }
        });
    }

    // Handle Cancel Crop
    if (cancelCropBtn) {
        cancelCropBtn.addEventListener('click', closeCropper);
    }

    // Form submission
    if (productForm) {
        productForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // Validate all fields
            const name = document.getElementById('name')?.value.trim() || '';
            const description = document.getElementById('description')?.value.trim() || '';
            const category = document.getElementById('category')?.value || '';
            
            // Get brand value, handling both dropdown and input field possibilities
            let brand = '';
            const brandInput = document.getElementById('brand');
            if (brandInput) {
                brand = brandInput.value.trim();
            } else {
                // If there's a brand dropdown instead of input
                const brandSelect = document.querySelector('select[name="brand"]');
                if (brandSelect) {
                    brand = brandSelect.value;
                }
            }
            
            const sizeInput = document.querySelector('input[name="size"]');
            const size = sizeInput ? sizeInput.value.trim() : '';
            
            if (!name || !description || !category ) {
                showToast('Please fill all required fields', 'error');
                return;
            }
            
            // Validate images
            if (!mainFile) {
                showToast('Please upload a main image', 'error');
                return;
            }
            
            if (subFiles.length < 3) {
                showToast('Please upload at least 3 additional images', 'error');
                return;
            }
            
            const formData = new FormData();
            formData.append('name', name);
            formData.append('description', description);
            formData.append('category', category);
            
            if (brand) {
                formData.append('brand', brand);
            }
            
            if (size) {
                formData.append('size', size);
            }
            
            // Add main image - use either cropped or original
            if (mainCroppedImage) {
                formData.append('mainImage', mainCroppedImage.blob, mainCroppedImage.name);
            } else {
                formData.append('mainImage', mainFile);
            }
            
            // Add sub images - use either cropped or original for each
            subFiles.forEach((file, index) => {
                if (subCroppedImages[index]) {
                    formData.append('subImages', subCroppedImages[index].blob, subCroppedImages[index].name);
                } else {
                    formData.append('subImages', file);
                }
            });
            
            // Add variants if they exist
            const variantElements = document.querySelectorAll('#variantsContainer > div');
            if (variantElements && variantElements.length > 0) {
                Array.from(variantElements).forEach(variant => {
                    const index = variant.dataset.index;
                    const sizeInput = variant.querySelector(`input[name="variants[${index}][size]"]`);
                    const priceInput = variant.querySelector(`input[name="variants[${index}][regularPrice]"]`);
                    const qtyInput = variant.querySelector(`input[name="variants[${index}][quantity]"]`);
                    
                    if (sizeInput && priceInput && qtyInput) {
                        formData.append(`variants[${index}][size]`, sizeInput.value);
                        formData.append(`variants[${index}][regularPrice]`, priceInput.value);
                        formData.append(`variants[${index}][quantity]`, qtyInput.value);
                    }
                });
            }
            
            // Submit form
            if (submitBtn) {
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<svg class="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg><span>Processing...</span>';
            }
            
            try {
                const response = await fetch('/admin/products/add', {
                    method: 'POST',
                    body: formData
                });
                
                if (!response.ok) {
                    const result = await response.json().catch(() => ({ message: 'Failed to add product' }));
                    throw new Error(result.message || 'Failed to add product');
                }                
                
                showToast('Product added successfully!');
                setTimeout(() => window.location.href = '/admin/products', 1000);
            } catch (error) {
                console.error('Form submission error:', error);
                showToast(error.message || 'Failed to submit form', 'error');
                if (submitBtn) {
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" /></svg><span>Add Product</span>';
                }
            }
        });
    }

    // Handle Cancel button click
    if (cancelBtn) {
        cancelBtn.addEventListener('click', function() {
            // Confirm before canceling
            if(confirm('Are you sure you want to cancel? Any unsaved changes will be lost.')) {
                // Redirect back to products page
                window.location.href = '/admin/products';
            }
        });
    }

    // Make sure submitBtn triggers form submission when clicked directly
    if (submitBtn && productForm) {
        submitBtn.addEventListener('click', function(e) {
            e.preventDefault();
            productForm.dispatchEvent(new Event('submit'));
        });
    }
});

document.addEventListener('DOMContentLoaded', function() {
    const variantsContainer = document.getElementById("variantsContainer");
    const addVariantBtn = document.getElementById("addVariantBtn");
  
    if (!variantsContainer || !addVariantBtn) {
        console.warn("Variants elements not found in the DOM");
        return;
    }
  
    function createVariantRow(index = Date.now(), data = {}) {
        const wrapper = document.createElement("div");
        wrapper.className = "flex items-center gap-2";
        wrapper.dataset.index = index;
  
        wrapper.innerHTML = `
        <input type="text" name="variants[${index}][size]" placeholder="Size"
          value="${data.size || ''}"
          class="border border-gray-300 rounded px-2 py-1 w-1/3" required>
  
        <input type="number" name="variants[${index}][regularPrice]" placeholder="Price"
          value="${data.regularPrice || ''}"
          class="border border-gray-300 rounded px-2 py-1 w-1/3" required>
  
        <input type="number" name="variants[${index}][quantity]" placeholder="Qty"
          value="${data.quantity || ''}"
          class="border border-gray-300 rounded px-2 py-1 w-1/4" required>
  
        <button type="button" class="text-red-500 remove-variant">✕</button>
        `;
  
        variantsContainer.appendChild(wrapper);
    }
  
    addVariantBtn.addEventListener("click", () => {
        createVariantRow();
    });
  
    variantsContainer.addEventListener("click", (e) => {
        if (e.target.classList.contains("remove-variant")) {
            e.target.parentElement.remove();
        }
    });
  
    // Initialize with at least one row if empty
    if (variantsContainer.children.length === 0) {
        createVariantRow();
    }
    
    try {
        
        if (typeof oldInput !== 'undefined' && oldInput?.variants) {
            variantsContainer.innerHTML = '';
            
            for (let key in oldInput.variants) {
                createVariantRow(key, oldInput.variants[key]);
            }
        }
    } catch (e) {
        console.error("Error processing old input data:", e);
    }
});
      </script>
      
</body>
</html>