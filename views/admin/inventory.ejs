<div class="px-3 sm:px-4 py-4 sm:py-6 bg-[var(--surface)] rounded-md shadow-sm">
    <h1 class="text-xl sm:text-2xl font-semibold text-[var(--text)] mb-4 sm:mb-6">Inventory Management</h1>

    <!-- Alert Container -->
    <div id="alert-container" class="mb-4 sm:mb-6"></div>

    <!-- Search -->
    <form method="GET" action="/admin/inventory" class="mb-4 sm:mb-6 flex gap-3 flex-col sm:flex-row">
        <input
            type="text"
            name="search"
            value="<%= searchQuery %>"
            placeholder="Search by Product Name or Size"
            class="px-3 py-2 border border-[var(--border)] rounded-md text-sm placeholder-gray-400 focus:ring-2 focus:ring-[var(--brand)] focus:border-[var(--brand)] transition duration-300 flex-1"
        >
        <div class="flex gap-3">
            <button type="submit" class="px-3 py-2 bg-[var(--brand)] text-[var(--text)] rounded-md hover:bg-[var(--brand-600)] text-sm focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2 transition duration-300">Search</button>
            <a href="/admin/inventory" class="px-3 py-2 bg-gray-500 text-[var(--text)] rounded-md hover:bg-gray-600 text-sm focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2 transition duration-300 text-center">Clear</a>
        </div>
    </form>

    <!-- Products Table -->
    <div class="bg-[var(--surface)] rounded-md shadow-sm overflow-x-auto">
        <table class="min-w-full divide-y divide-[var(--border)]">
            <thead class="bg-[var(--bg)]">
                <tr>
                    <th class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-[var(--text)] uppercase tracking-wider">Product Name</th>
                    <th class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-[var(--text)] uppercase tracking-wider hidden sm:table-cell">Category</th>
                    <th class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-[var(--text)] uppercase tracking-wider hidden sm:table-cell">Brand</th>
                    <th class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-[var(--text)] uppercase tracking-wider">Size</th>
                    <th class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-[var(--text)] uppercase tracking-wider">Price</th>
                    <th class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-[var(--text)] uppercase tracking-wider">Stock</th>
                    <th class="px-3 sm:px-6 py-2 sm:py-3 text-left text-xs font-medium text-[var(--text)] uppercase tracking-wider">Actions</th>
                </tr>
            </thead>
            <tbody class="bg-[var(--surface)] divide-y divide-[var(--border)]">
                <% if (products.length > 0) { %>
                    <% products.forEach(product => { %>
                        <% product.variants.forEach(variant => { %>
                            <tr class="hover:bg-gray-100">
                                <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-sm text-[var(--text)]"><%= product.name %></td>
                                <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-sm text-[var(--text)] hidden sm:table-cell"><%= product.category ? product.category.name : 'N/A' %></td>
                                <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-sm text-[var(--text)] hidden sm:table-cell"><%= product.brand ? product.brand.name : 'N/A' %></td>
                                <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-sm text-[var(--text)]"><%= variant.size %></td>
                                <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-sm text-[var(--text)]">â‚¹<%= variant.discountedPrice %></td>
                                <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-sm <%= variant.isLowStock ? 'text-red-500 font-semibold' : 'text-[var(--text)]' %>">
                                    <%= variant.quantity %> <%= variant.isLowStock ? '(Low)' : '' %>
                                </td>
                                <td class="px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-sm">
                                    <div class="flex gap-2">
                                        <input
                                            type="number"
                                            id="stock-<%= product._id %>-<%= variant.size %>"
                                            value="<%= variant.quantity %>"
                                            min="0"
                                            class="px-2 py-1 border border-[var(--border)] rounded-md w-16 sm:w-20 text-xs focus:ring-2 focus:ring-[var(--brand)] focus:border-[var(--brand)] transition duration-300"
                                        >
                                        <button
                                            onclick="updateStock('<%= product._id %>', '<%= variant.size %>')"
                                            class="px-2 py-1 bg-[var(--brand)] text-[var(--text)] rounded-md hover:bg-[var(--brand-600)] text-xs focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2 transition duration-300"
                                        >
                                            Update
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        <% }) %>
                    <% }) %>
                <% } else { %>
                    <tr>
                        <td colspan="7" class="px-3 sm:px-6 py-4 text-center text-sm text-[var(--text)]">No products found</td>
                    </tr>
                <% } %>
            </tbody>
        </table>
    </div>

    <!-- Pagination -->
    <% if (totalProducts > 0) { %>
        <div class="mt-4 sm:mt-6 flex flex-col sm:flex-row justify-between items-center gap-3">
            <p class="text-xs text-gray-500">
                Showing <%= (currentPage - 1) * 10 + 1 %> to <%= Math.min(currentPage * 10, totalProducts) %> of <%= totalProducts %> products
            </p>
            <div class="flex flex-wrap gap-1 justify-center">
                <% if (currentPage > 1) { %>
                    <a href="/admin/inventory?page=1&search=<%= searchQuery %>" class="px-2 sm:px-3 py-1 border border-[var(--border)] bg-[var(--surface)] text-[var(--text)] rounded-md hover:bg-gray-100 text-xs focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2 transition duration-300">First</a>
                    <a href="/admin/inventory?page=<%= currentPage - 1 %>&search=<%= searchQuery %>" class="px-2 sm:px-3 py-1 border border-[var(--border)] bg-[var(--surface)] text-[var(--text)] rounded-md hover:bg-gray-100 text-xs focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2 transition duration-300">Prev</a>
                <% } %>

                <% const maxVisiblePages = 5;
                   let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
                   let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
                   
                   if (endPage - startPage + 1 < maxVisiblePages) {
                       startPage = Math.max(1, endPage - maxVisiblePages + 1);
                   }
                   
                   for (let i = startPage; i <= endPage; i++) { %>
                    <a href="/admin/inventory?page=<%= i %>&search=<%= searchQuery %>" class="px-2 sm:px-3 py-1 border border-[var(--border)] <%= i === currentPage ? 'bg-[var(--brand)] text-[var(--text)]' : 'bg-[var(--surface)] text-[var(--text)] hover:bg-gray-100' %> rounded-md text-xs focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2 transition duration-300"><%= i %></a>
                <% } %>

                <% if (currentPage < totalPages) { %>
                    <a href="/admin/inventory?page=<%= currentPage + 1 %>&search=<%= searchQuery %>" class="px-2 sm:px-3 py-1 border border-[var(--border)] bg-[var(--surface)] text-[var(--text)] rounded-md hover:bg-gray-100 text-xs focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2 transition duration-300">Next</a>
                    <a href="/admin/inventory?page=<%= totalPages %>&search=<%= searchQuery %>" class="px-2 sm:px-3 py-1 border border-[var(--border)] bg-[var(--surface)] text-[var(--text)] rounded-md hover:bg-gray-100 text-xs focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2 transition duration-300">Last</a>
                <% } %>
            </div>
        </div>
    <% } %>

    <!-- SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Initialize SweetAlert2 with custom settings
        const Toast = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 4000,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer);
                toast.addEventListener('mouseleave', Swal.resumeTimer);
            }
        });

        // Function to show alerts using SweetAlert2
        function showAlert(message, type) {
            Toast.fire({
                icon: type,
                title: message
            });
        }

        // Display initial success/error messages as toasts
        <% if (success && success.length > 0) { %>
            showAlert('<%= success %>', 'success');
        <% } %>
        <% if (error && error.length > 0) { %>
            showAlert('<%= error %>', 'error');
        <% } %>

        // Update stock via Fetch
        async function updateStock(productId, size) {
            const stockInput = document.getElementById(`stock-${productId}-${size}`);
            const quantity = stockInput.value;
            const button = stockInput.nextElementSibling;
            const originalText = button.textContent;

            if (isNaN(quantity) || quantity < 0 || quantity.includes('.')) {
                showAlert('Invalid quantity value', 'error');
                return;
            }

            button.disabled = true;
            button.textContent = 'Updating...';

            try {
                const response = await fetch(`/admin/inventory/update/${productId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'CSRF-Token': '<%= csrfToken %>',
                    },
                    body: JSON.stringify({ size, quantity }),
                });

                const result = await response.json();
                if (response.ok) {
                    showAlert(result.message, 'success');
                    const stockCell = stockInput.parentElement.parentElement.previousElementSibling;
                    stockCell.textContent = `${quantity} ${quantity <= '<%= lowStockThreshold %>' ? '(Low)' : ''}`;
                    stockCell.className = `px-3 sm:px-6 py-3 sm:py-4 whitespace-nowrap text-sm ${quantity <= '<%= lowStockThreshold %>' ? 'text-red-500 font-semibold' : 'text-[var(--text)]'}`;
                } else {
                    showAlert(result.message || 'Error updating stock', 'error');
                }
            } catch (err) {
                console.error('Error updating stock:', err);
                showAlert('Server error occurred', 'error');
            } finally {
                button.disabled = false;
                button.textContent = originalText;
            }
        }
    </script>
</div>