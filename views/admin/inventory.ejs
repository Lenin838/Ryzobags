<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin - Inventory Management</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100">
  <div class="container mx-auto p-6">
    <h1 class="text-2xl font-bold text-indigo-600 mb-6">Inventory Management</h1>

    <!-- Alert Container -->
    <div id="alert-container" class="mb-4">
      <% if (success && success.length > 0) { %>
        <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4">
          <%= success %>
        </div>
      <% } %>
      <% if (error && error.length > 0) { %>
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
          <%= error %>
        </div>
      <% } %>
    </div>

    <!-- Search -->
    <form method="GET" action="/admin/inventory" class="mb-6 flex flex-wrap gap-4">
      <input
        type="text"
        name="search"
        value="<%= searchQuery %>"
        placeholder="Search by Product Name or Size"
        class="p-2 border rounded w-full sm:w-1/3"
      >
      <button type="submit" class="bg-indigo-600 text-white p-2 rounded hover:bg-indigo-700">Search</button>
      <a href="/admin/inventory" class="bg-gray-500 text-white p-2 rounded hover:bg-gray-600">Clear</a>
    </form>

    <!-- Products Table -->
    <div class="bg-white shadow rounded-lg overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product Name</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Brand</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Size</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          <% if (products.length > 0) { %>
            <% products.forEach(product => { %>
              <% product.variants.forEach(variant => { %>
                <tr>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900"><%= product.name %></td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"><%= product.category ? product.category.name : 'N/A' %></td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"><%= product.brand ? product.brand.name : 'N/A' %></td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500"><%= variant.size %></td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">â‚¹<%= variant.regularPrice %></td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm <%= variant.isLowStock ? 'text-red-600 font-bold' : 'text-gray-500' %>">
                    <%= variant.quantity %> <%= variant.isLowStock ? '(Low Stock)' : '' %>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm">
                    <div class="flex gap-2">
                      <input
                        type="number"
                        id="stock-<%= product._id %>-<%= variant.size %>"
                        value="<%= variant.quantity %>"
                        min="0"
                        class="p-1 border rounded w-20"
                      >
                      <button
                        onclick="updateStock('<%= product._id %>', '<%= variant.size %>')"
                        class="bg-indigo-600 text-white px-2 py-1 rounded hover:bg-indigo-700"
                      >
                        Update
                      </button>
                    </div>
                  </td>
                </tr>
              <% }) %>
            <% }) %>
          <% } else { %>
            <tr>
              <td colspan="7" class="px-6 py-4 text-center text-sm text-gray-500">No products found</td>
            </tr>
          <% } %>
        </tbody>
      </table>
    </div>

    <!-- Pagination -->
    <% if (totalProducts > 0) { %>
      <div class="mt-6 flex flex-col sm:flex-row justify-between items-center">
        <p class="text-sm text-gray-700 mb-4 sm:mb-0">
          Showing <%= (currentPage - 1) * 10 + 1 %> to <%= Math.min(currentPage * 10, totalProducts) %> of <%= totalProducts %> products
        </p>
        <div class="flex gap-1">
          <% if (currentPage > 1) { %>
            <a href="/admin/inventory?page=1&search=<%= searchQuery %>" class="px-3 py-1 border rounded hover:bg-gray-100">First</a>
            <a href="/admin/inventory?page=<%= currentPage - 1 %>&search=<%= searchQuery %>" class="px-3 py-1 border rounded hover:bg-gray-100">Prev</a>
          <% } %>

          <% const maxVisiblePages = 5;
             let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
             let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
             
             if (endPage - startPage + 1 < maxVisiblePages) {
               startPage = Math.max(1, endPage - maxVisiblePages + 1);
             }
             
             for (let i = startPage; i <= endPage; i++) { %>
            <a href="/admin/inventory?page=<%= i %>&search=<%= searchQuery %>" class="px-3 py-1 border rounded <%= i === currentPage ? 'bg-indigo-600 text-white' : 'hover:bg-gray-100' %>"><%= i %></a>
          <% } %>

          <% if (currentPage < totalPages) { %>
            <a href="/admin/inventory?page=<%= currentPage + 1 %>&search=<%= searchQuery %>" class="px-3 py-1 border rounded hover:bg-gray-100">Next</a>
            <a href="/admin/inventory?page=<%= totalPages %>&search=<%= searchQuery %>" class="px-3 py-1 border rounded hover:bg-gray-100">Last</a>
          <% } %>
        </div>
      </div>
    <% } %>
  </div>

  <script>
    // Function to show alerts
    function showAlert(message, type) {
      const alertContainer = document.getElementById('alert-container');
      alertContainer.innerHTML = `
        <div class="bg-${type === 'success' ? 'green' : 'red'}-100 border-l-4 border-${type === 'success' ? 'green' : 'red'}-500 text-${type === 'success' ? 'green' : 'red'}-700 p-4 mb-4">
          ${message}
        </div>
      `;
      setTimeout(() => {
        alertContainer.innerHTML = '';
      }, 5000);
    }

    // Update stock via Fetch
    async function updateStock(productId, size) {
      const stockInput = document.getElementById(`stock-${productId}-${size}`);
      const quantity = stockInput.value;
      const button = stockInput.nextElementSibling;
      const originalText = button.textContent;

      if (isNaN(quantity) || quantity < 0 || quantity.includes('.')) {
        showAlert('Invalid quantity value', 'error');
        return;
      }

      button.disabled = true;
      button.textContent = 'Updating...';

      try {
        const response = await fetch(`/admin/inventory/update/${productId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'CSRF-Token': '<%= csrfToken %>',
          },
          body: JSON.stringify({ size, quantity }),
        });

        const result = await response.json();
        if (response.ok) {
          showAlert(result.message, 'success');
          // Update stock display
          const stockCell = stockInput.parentElement.parentElement.previousElementSibling;
          stockCell.textContent = `${quantity} ${quantity <= '<%= lowStockThreshold %>' ? '(Low Stock)' : ''}`;
          stockCell.className = `px-6 py-4 whitespace-nowrap text-sm ${quantity <= '<%= lowStockThreshold %>' ? 'text-red-600 font-bold' : 'text-gray-500'}`;
        } else {
          showAlert(result.message || 'Error updating stock', 'error');
        }
      } catch (err) {
        console.error('Error updating stock:', err);
        showAlert('Server error occurred', 'error');
      } finally {
        button.disabled = false;
        button.textContent = originalText;
      }
    }
  </script>
</body>
</html>