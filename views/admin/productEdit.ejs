<!DOCTYPE html>
<html lang="en">
<head>
    <title>Edit Product | Admin Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
</head>
<body class="bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen">
    <div class="container mx-auto px-4 py-10 max-w-6xl">
        <div class="mb-8 flex flex-col md:flex-row md:items-center md:justify-between">
            <div class="mb-4 md:mb-0">
                <h1 class="text-3xl font-extrabold text-gray-800 tracking-tight">Edit Product</h1>
                <p class="text-gray-600 mt-2 max-w-2xl">Update product details, images, and variants</p>
            </div>
        </div>
        
        <div class="bg-white rounded-2xl shadow-xl overflow-hidden border-2 border-gray-200 hover:border-indigo-200 transition-all duration-300">
            <div class="bg-gradient-to-r from-indigo-600 to-purple-600 h-2"></div>
            <form id="productForm" class="space-y-8 p-8">
                <input type="hidden" id="productId" name="productId" value="<%= product._id %>">
                
                <div class="space-y-6">
                    <div class="flex items-center space-x-3 mb-2">
                        <div class="h-10 w-10 rounded-full bg-indigo-100 flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z" />
                            </svg>
                        </div>
                        <h2 class="text-xl font-bold text-gray-800">Product Information</h2>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="name" class="block text-sm font-medium text-gray-700 mb-2">Product Name* <span class="sr-only">Required</span></label>
                            <input type="text" id="name" name="name" required value="<%= product.name %>"
                                   class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 placeholder-gray-400 transition-all duration-300"
                                   aria-required="true">
                        </div>
                    </div>

                    <div>
                        <label for="description" class="block text-sm font-medium text-gray-700 mb-2">Description* <span class="sr-only">Required</span></label>
                        <textarea id="description" name="description" rows="4" required
                                  class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 placeholder-gray-400 transition-all duration-300"
                                  aria-required="true"><%= product.description %></textarea>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="category" class="block text-sm font-medium text-gray-700 mb-2">Category* <span class="sr-only">Required</span></label>
                            <div class="relative">
                                <select id="category" name="category" required
                                        class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 placeholder-gray-400 transition-all duration-300 appearance-none bg-white pr-10"
                                        aria-required="true">
                                    <option value="">Select a category</option>
                                    <% categories.forEach(function(category) { %>
                                        <option value="<%= category._id %>" <%= product.category._id.toString() === category._id.toString() ? 'selected' : '' %>><%= category.name %></option>
                                    <% }); %>
                                </select>
                            </div>
                        </div>

                        <div>
                            <label for="brand" class="block text-sm font-medium text-gray-700 mb-2">Brand* <span class="sr-only">Required</span></label>
                            <div class="relative">
                                <select id="brand" name="brand"
                                        class="w-full px-4 py-3 border-2 border-gray-300 rounded-lg shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 placeholder-gray-400 transition-all duration-300 appearance-none bg-white pr-10"
                                        aria-required="true">
                                    <option value="">Select a brand</option>
                                    <% brands.forEach(function(brand) { %>
                                        <option value="<%= brand._id %>" <%= product.brand && product.brand._id.toString() === brand._id.toString() ? 'selected' : '' %>><%= brand.name %></option>
                                    <% }); %>
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700">Variants</label>
                            <div id="variantsContainer" class="space-y-2 mt-2"></div>
                            <button type="button" id="addVariantBtn" class="mt-2 px-3 py-1 bg-green-500 text-white rounded hover:bg-green-600 transition-colors">
                                + Add Variant
                            </button>
                            <% if (validationErrors?.variants) { %>
                                <p class="text-red-500 text-xs mt-1" role="alert"><%= validationErrors.variants %></p>
                            <% } %>
                        </div>
                    </div>
                </div>

                <div class="space-y-6 pt-6 border-t-2 border-gray-100">
                    <div class="flex items-center space-x-3 mb-2">
                        <div class="h-10 w-10 rounded-full bg-indigo-100 flex items-center justify-center">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-indigo-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                            </svg>
                        </div>
                        <h2 class="text-xl font-bold text-gray-800">Product Images</h2>
                    </div>
                    
                    <div class="bg-gradient-to-r from-indigo-50 to-purple-50 p-6 rounded-xl border-2 border-indigo-100 shadow-md hover:shadow-lg transition-all duration-300">
                        <div class="flex items-center justify-between mb-4">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-800">Main Image</h3>
                                <p class="text-sm text-gray-500">This will be the featured image for your product</p>
                            </div>
                            <div class="flex items-center space-x-2">
                                <span id="mainFileCount" class="text-sm font-medium text-gray-500 bg-green-100 px-3 py-1 rounded-full shadow-sm border-2 border-green-300">Current image</span>
                                <div class="h-2 w-2 rounded-full bg-red-400"></div>
                                <span class="text-xs text-gray-500 font-medium">Required</span>
                            </div>
                        </div>
                        
                        <input type="file" id="mainImageUpload" accept="image/*" class="hidden" />
                        <div class="flex items-center space-x-4">
                            <button type="button" onclick="document.getElementById('mainImageUpload').click()"
                                    class="px-6 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-lg hover:from-indigo-700 hover:to-purple-700 transition-all duration-300 flex items-center space-x-2 shadow-md transform hover:scale-105">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 94949494949494 stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                </svg>
                                <span>Change Main Image</span>
                            </button>
                            <button type="button" id="cropMainBtn" class="px-6 py-3 bg-amber-500 text-white rounded-lg hover:bg-amber-600 transition-all duration-300 flex items-center space-x-2 shadow-md transform hover:scale-105 hidden">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8" />
                                </svg>
                                <span>Crop Image</span>
                            </button>
                        </div>
                        <div id="mainPreviewContainer" class="mt-6">
                            <% if (product.mainImage) { %>
                                <div class="border-2 border-gray-200 rounded-lg p-4 bg-white shadow-md">
                                    <div class="relative">
                                        <img src="<%= product.mainImage %>" class="w-full h-64 object-contain rounded-lg border-2 border-gray-200" alt="Current main image">
                                    </div>
                                    <div class="mt-4 flex space-x-3">
                                        <button type="button" class="px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700 transition-colors" onclick="confirmDeleteImage('main')">
                                            Remove
                                        </button>
                                    </div>
                                </div>
                            <% } %>
                        </div>
                    </div>
                    
                    <div class="bg-gradient-to-r from-purple-50 to-indigo-50 p-6 rounded-xl border-2 border-purple-100 shadow-md hover:shadow-lg transition-all duration-300">
                        <div class="flex items-center justify-between mb-4">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-800">Additional Images</h3>
                                <p class="text-sm text-gray-500">Upload 3 or more images to showcase your product</p>
                            </div>
                            <div class="flex items-center space-x-2">
                                <span id="subFileCount" class="text-sm font-medium text-gray-500 bg-green-100 px-3 py-1 rounded-full shadow-sm border-2 border-green-300"><%= product.subImages.length %> images</span>
                                <div class="h-2 w-2 rounded-full bg-red-400"></div>
                                <span class="text-xs text-gray-500 font-medium">Min. 3 required</span>
                            </div>
                        </div>
                        
                        <input type="file" id="subImageUpload" accept="image/*" multiple class="hidden" />
                        <div class="flex items-center space-x-4">
                            <button type="button" onclick="document.getElementById('subImageUpload').click()"
                                    class="px-6 py-3 bg-white border-2 border-indigo-500 text-indigo-600 rounded-lg hover:bg-indigo-50 transition-all duration-300 flex items-center space-x-2 shadow-md transform hover:scale-105">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                </svg>
                                <span>Add More Images</span>
                            </button>
                        </div>
                        <div id="subPreviewContainer" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mt-6">
                            <% product.subImages.forEach((image, index) => { %>
                                <div class="border-2 border-gray-200 rounded-lg p-4 bg-white shadow-md" data-index="<%= index %>">
                                    <div class="relative h-40">
                                        <img src="<%= image %>" class="w-full h-full object-contain rounded-lg border-2 border-gray-200" alt="Sub image <%= index + 1 %>">
                                    </div>
                                    <div class="mt-3 flex space-x-2">
                                        <button type="button" class="px-2 py-1 bg-amber-500 text-white text-sm rounded hover:bg-amber-600 transition-colors crop-sub-btn" data-index="<%= index %>">
                                            Crop
                                        </button>
                                        <button type="button" class="px-2 py-1 bg-red-600 text-white text-sm rounded hover:bg-red-700 transition-colors" onclick="confirmDeleteImage('sub', '<%= index %>')">
                                            Remove
                                        </button>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                </div>

                <div class="flex items-center justify-between space-x-4 pt-6 border-t-2 border-gray-200">
                    <div class="text-sm text-gray-500">
                        <span class="text-red-500">*</span> Required fields
                    </div>
                    <div class="flex space-x-3">
                        <button type="button" class="px-6 py-3 border-2 border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-all duration-300 shadow-sm hover:shadow"
                                onclick="window.location.href='/admin/products'">
                            Cancel
                        </button>
                        <button type="submit" id="submitBtn"
                                class="px-8 py-3 bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-lg hover:from-blue-600 hover:to-indigo-700 transition-all duration-300 flex items-center space-x-2 shadow-md transform hover:scale-105">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                            </svg>
                            <span>Update Product</span>
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <div id="cropModal" class="fixed inset-0 z-50 hidden" role="dialog" aria-labelledby="cropModalTitle" aria-modal="true">
        <div class="absolute inset-0 bg-black bg-opacity-50 backdrop-blur-sm"></div>
        <div class="relative z-10 bg-white rounded-xl shadow-2xl max-w-4xl mx-auto mt-20 overflow-hidden">
            <div class="bg-gradient-to-r from-indigo-600 to-purple-600 h-2"></div>
            <div class="p-6">
                <div class="flex items-center justify-between mb-4">
                    <h3 id="cropModalTitle" class="text-xl font-bold text-gray-800">Crop Image</h3>
                    <button type="button" id="closeCropModal" class="text-gray-500 hover:text-gray-700" aria-label="Close crop modal">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>
                <div class="p-4 border-2 border-gray-200 rounded-lg bg-gray-50 shadow-inner">
                    <div class="h-96 max-h-96">
                        <img id="cropImage" class="max-h-full mx-auto" alt="Image to crop" />
                    </div>
                </div>
                <div class="flex justify-between mt-6">
                    <div class="flex space-x-4">
                        <button type="button" id="rotateLBtn" class="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition-colors" aria-label="Rotate left">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                            </svg>
                        </button>
                        <button type="button" id="rotateRBtn" class="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 transition-colors" aria-label="Rotate right">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                            </svg>
                        </button>
                    </div>
                    <div class="flex space-x-3">
                        <button type="button" id="cancelCropBtn" class="px-5 py-2 border-2 border-gray-300 text-gray-700 rounded hover:bg-gray-50 transition-colors">
                            Cancel
                        </button>
                        <button type="button" id="saveCropBtn" class="px-5 py-2 bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded hover:from-green-600 hover:to-emerald-700 transition-colors">
                            Apply Crop
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="toastContainer" class="fixed bottom-4 right-4 z-50 space-y-2"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
    
    <script>

const deletedImages = { main: false, sub: [] };
let cropper;
let currentCropType = null;
let currentCropIndex = null;
let croppedImages = { main: null, sub: {} };
const MAX_FILE_SIZE = 5 * 1024 * 1024; // 5MB

function showToast(message, type = 'success') {
    const toastContainer = document.getElementById('toastContainer');
    if (!toastContainer) return;
    
    const toast = document.createElement('div');
    const types = {
        success: 'bg-green-500 text-white',
        error: 'bg-red-500 text-white',
        warning: 'bg-yellow-500 text-gray-800',
        info: 'bg-blue-500 text-white'
    };
    
    toast.className = `${types[type] || types.success} px-4 py-2 rounded-md shadow-lg flex items-center justify-between min-w-64 max-w-xs transition-all duration-300 transform hover:scale-105`;
    toast.innerHTML = `
        <span>${message}</span>
        <button class="hover:opacity-75" onclick="this.parentElement.remove()" aria-label="Close toast">×</button>
    `;
    
    toastContainer.appendChild(toast);
    setTimeout(() => toast.remove(), 5000);
}

function confirmDeleteImage(type, index = null) {
    if (type === 'main') {
        if (confirm('Are you sure you want to remove the main image?')) {
            deletedImages.main = true;
            croppedImages.main = null;
            document.getElementById('mainPreviewContainer').innerHTML = '';
            document.getElementById('mainImageUpload').value = '';
            document.getElementById('cropMainBtn').classList.add('hidden');
            document.getElementById('mainFileCount').textContent = 'No image';
        }
    } else if (type === 'sub' && index !== null) {
        if (confirm('Are you sure you want to remove this image?')) {
            deletedImages.sub.push(index);
            delete croppedImages.sub[index];
            const container = document.querySelector(`#subPreviewContainer [data-index="${index}"]`);
            if (container) container.remove();
            updateSubImageCount();
        }
    }
}

function updateSubImageCount() {
    const subImages = document.querySelectorAll('#subPreviewContainer > div').length;
    const subFileCount = document.getElementById('subFileCount');
    subFileCount.textContent = `${subImages} images`;
    subFileCount.className = `text-sm font-medium text-gray-500 ${subImages >= 3 ? 'bg-green-100 border-green-300' : 'bg-red-100 border-red-300'} px-3 py-1 rounded-full shadow-sm border-2`;
}

function initCropper(src, type, index = null) {
    const cropImage = document.getElementById('cropImage');
    cropImage.src = src;
    
    if (cropper) cropper.destroy();
    
    document.getElementById('cropModal').classList.remove('hidden');
    currentCropType = type;
    currentCropIndex = index;
    
    cropper = new Cropper(cropImage, {
        aspectRatio: type === 'main' ? 1 : NaN,
        viewMode: 1,
        guides: true,
        autoCropArea: 0.8,
        responsive: true
    });

    document.getElementById('cropModal').focus();
}

function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

document.addEventListener('DOMContentLoaded', function() {
    console.log('Product subImages:', '<%- JSON.stringify(product.subImages) %>');

    const variantsContainer = document.getElementById('variantsContainer');
    const addVariantBtn = document.getElementById('addVariantBtn');

    function createVariantRow(index = Date.now(), variant = {}) {
        const wrapper = document.createElement('div');
        wrapper.className = 'flex items-center gap-2';
        wrapper.dataset.index = index;

        wrapper.innerHTML = `
            <input type="text" name="variants[${index}][size]" placeholder="Size"
                   value="${variant.size || ''}"
                   class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" required
                   aria-label="Variant size">
            <input type="number" name="variants[${index}][regularPrice]" placeholder="Price"
                   value="${variant.regularPrice || ''}" step="0.01"
                   class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" required
                   aria-label="Variant price">
            <input type="number" name="variants[${index}][quantity]" placeholder="Qty"
                   value="${variant.quantity || ''}"
                   class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500" required
                   aria-label="Variant quantity">
            <button type="button" class="text-red-500 hover:text-red-700 remove-variant px-2" aria-label="Remove variant">✕</button>
        `;

        variantsContainer.appendChild(wrapper);
    }

    '<% if (product.variants && product.variants.length > 0) { %>'
        '<% product.variants.forEach((variant, index) => { %>'
            createVariantRow('<%= index %>', {
                size: '<%= variant.size %>',
                regularPrice: '<%= variant.regularPrice %>',
                quantity: '<%= variant.quantity %>'
            });
        '<% }); %>'
    '<% } %>'

    addVariantBtn.addEventListener('click', () => createVariantRow());
    variantsContainer.addEventListener('click', (e) => {
        if (e.target.classList.contains('remove-variant')) {
            e.target.parentElement.remove();
        }
    });

    if (variantsContainer.children.length === 0) {
        createVariantRow();
    }

    document.getElementById('name').addEventListener('input', debounce(async function(e) {
        const name = e.target.value.trim();
        const productId = document.getElementById('productId').value;
        if (name) {
            try {
                const response = await fetch(`/admin/products/check-name?name=${encodeURIComponent(name)}&productId=${productId}`);
                const result = await response.json();
                if (!result.isAvailable) {
                    showToast('Product name already exists', 'error');
                    e.target.setCustomValidity('Product name already exists');
                } else {
                    e.target.setCustomValidity('');
                }
            } catch (error) {
                console.error('Name check error:', error);
                showToast('Error checking product name', 'error');
            }
        } else {
            e.target.setCustomValidity('');
        }
    }, 500));

    document.getElementById('mainImageUpload').addEventListener('change', function(e) {
        if (e.target.files.length > 0) {
            const file = e.target.files[0];
            if (file.size > MAX_FILE_SIZE) {
                showToast('Main image must be less than 5MB', 'error');
                e.target.value = '';
                return;
            }
            const reader = new FileReader();
            reader.onload = function(event) {
                initCropper(event.target.result, 'main');
            };
            reader.readAsDataURL(file);
        }
    });

    document.getElementById('subImageUpload').addEventListener('change', function(e) {
        if (e.target.files.length > 0) {
            Array.from(e.target.files).forEach((file, i) => {
                if (file.size > MAX_FILE_SIZE) {
                    showToast(`Sub image ${i + 1} must be less than 5MB`, 'error');
                    return;
                }
                const reader = new FileReader();
                reader.onload = function(event) {
                    const newIndex = Date.now() + i;
                    initCropper(event.target.result, 'sub', newIndex);
                };
                reader.readAsDataURL(file);
            });
        }
    });

    document.getElementById('subPreviewContainer').addEventListener('click', (e) => {
        if (e.target.classList.contains('crop-sub-btn')) {
            const index = e.target.dataset.index;
            const img = document.querySelector(`#subPreviewContainer [data-index="${index}"] img`);
            if (img) initCropper(img.src, 'sub', index);
        }
    });

    document.getElementById('closeCropModal').addEventListener('click', () => {
        document.getElementById('cropModal').classList.add('hidden');
        if (cropper) cropper.destroy();
    });

    document.getElementById('cancelCropBtn').addEventListener('click', () => {
        document.getElementById('cropModal').classList.add('hidden');
        if (cropper) cropper.destroy();
        if (currentCropType === 'main') {
            document.getElementById('mainImageUpload').value = '';
        }
    });

    document.getElementById('rotateLBtn').addEventListener('click', () => {
        if (cropper) cropper.rotate(-90);
    });

    document.getElementById('rotateRBtn').addEventListener('click', () => {
        if (cropper) cropper.rotate(90);
    });

    document.getElementById('saveCropBtn').addEventListener('click', () => {
        if (cropper) {
            cropper.getCroppedCanvas().toBlob((blob) => {
                const url = URL.createObjectURL(blob);
                if (currentCropType === 'main') {
                    croppedImages.main = blob;
                    document.getElementById('mainPreviewContainer').innerHTML = `
                        <div class="border-2 border-gray-200 rounded-lg p-4 bg-white shadow-md">
                            <div class="relative">
                                <img src="${url}" class="w-full h-64 object-contain rounded-lg border-2 border-gray-200" alt="Cropped main image">
                            </div>
                            <div class="mt-4 flex space-x-3">
                                <button type="button" class="px-3 py-1 bg-amber-500 text-white rounded hover:bg-amber-600 transition-colors" onclick="initCropper('${url}', 'main')">
                                    Crop
                                </button>
                                <button type="button" class="px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700 transition-colors" onclick="confirmDeleteImage('main')">
                                    Remove
                                </button>
                            </div>
                        </div>
                    `;
                    document.getElementById('cropMainBtn').classList.remove('hidden');
                    document.getElementById('mainFileCount').textContent = '1 image';
                } else if (currentCropType === 'sub' && currentCropIndex !== null) {
                    croppedImages.sub[currentCropIndex] = blob;
                    const container = document.querySelector(`#subPreviewContainer [data-index="${currentCropIndex}"]`);
                    if (container) {
                        container.innerHTML = `
                            <div class="relative h-40">
                                <img src="${url}" class="w-full h-full object-contain rounded-lg border-2 border-gray-200" alt="Cropped sub image">
                            </div>
                            <div class="mt-3 flex space-x-2">
                                <button type="button" class="px-2 py-1 bg-amber-500 text-white text-sm rounded hover:bg-amber-600 transition-colors crop-sub-btn" data-index="${currentCropIndex}">
                                    Crop
                                </button>
                                <button type="button" class="px-2 py-1 bg-red-600 text-white text-sm rounded hover:bg-red-700 transition-colors" onclick="confirmDeleteImage('sub', '${currentCropIndex}')">
                                    Remove
                                </button>
                            </div>
                        `;
                    } else {
                        const newContainer = document.createElement('div');
                        newContainer.className = 'border-2 border-gray-200 rounded-lg p-4 bg-white shadow-md';
                        newContainer.dataset.index = currentCropIndex;
                        newContainer.innerHTML = `
                            <div class="relative h-40">
                                <img src="${url}" class="w-full h-full object-contain rounded-lg border-2 border-gray-200" alt="Cropped sub image">
                            </div>
                            <div class="mt-3 flex space-x-2">
                                <button type="button" class="px-2 py-1 bg-amber-500 text-white text-sm rounded hover:bg-amber-600 transition-colors crop-sub-btn" data-index="${currentCropIndex}">
                                    Crop
                                </button>
                                <button type="button" class="px-2 py-1 bg-red-600 text-white text-sm rounded hover:bg-red-700 transition-colors" onclick="confirmDeleteImage('sub', '${currentCropIndex}')">
                                    Remove
                                </button>
                            </div>
                        `;
                        document.getElementById('subPreviewContainer').appendChild(newContainer);
                    }
                    updateSubImageCount();
                }
                document.getElementById('cropModal').classList.add('hidden');
                cropper.destroy();
            }, 'image/jpeg', 0.8);
        }
    });

    document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !document.getElementById('cropModal').classList.contains('hidden')) {
            document.getElementById('cropModal').classList.add('hidden');
            if (cropper) cropper.destroy();
            if (currentCropType === 'main') {
                document.getElementById('mainImageUpload').value = '';
            }
        }
    });

    document.getElementById('productForm').addEventListener('submit', async function(e) {
        e.preventDefault();

        const subImagesCount = document.querySelectorAll('#subPreviewContainer > div').length;
        if (subImagesCount < 3) {
            showToast('At least 3 sub-images are required', 'error');
            return;
        }

        const mainImageContainer = document.getElementById('mainPreviewContainer');
        if (!mainImageContainer.querySelector('img') && !croppedImages.main && !document.getElementById('mainImageUpload').files.length) {
            showToast('Main image is required', 'error');
            return;
        }

        const variants = document.querySelectorAll('#variantsContainer > div');
        if (variants.length === 0) {
            showToast('At least one variant is required', 'error');
            return;
        }

        const formData = new FormData();
        formData.append('_method', 'PUT');
        formData.append('name', document.getElementById('name').value);
        formData.append('description', document.getElementById('description').value);
        formData.append('category', document.getElementById('category').value);
        formData.append('brand', document.getElementById('brand').value);

        const mainImageInput = document.getElementById('mainImageUpload');
        if (croppedImages.main) {
            formData.append('mainImage', croppedImages.main, 'mainImage.jpg');
        } else if (mainImageInput.files.length > 0) {
            formData.append('mainImage', mainImageInput.files[0]);
        } else if (deletedImages.main) {
            formData.append('deleteMainImage', 'true');
        }

        Object.keys(croppedImages.sub).forEach(index => {
            if (!deletedImages.sub.includes(index)) {
                formData.append('subImages', croppedImages.sub[index], `subImage_${index}.jpg`);
            }
        });

        deletedImages.sub.forEach(index => {
            formData.append('deletedSubImages[]', index);
        });

        document.querySelectorAll('#variantsContainer > div').forEach(variant => {
            const index = variant.dataset.index;
            const size = variant.querySelector(`input[name="variants[${index}][size]"]`).value;
            const price = variant.querySelector(`input[name="variants[${index}][regularPrice]"]`).value;
            const qty = variant.querySelector(`input[name="variants[${index}][quantity]"]`).value;
            formData.append(`variants[${index}][size]`, size);
            formData.append(`variants[${index}][regularPrice]`, price);
            formData.append(`variants[${index}][quantity]`, qty);
        });

        // Log FormData for debugging
        for (let [key, value] of formData.entries()) {
            console.log(`FormData: ${key} = ${value}`);
        }

        try {
            const submitBtn = document.getElementById('submitBtn');
            submitBtn.disabled = true;
            submitBtn.innerHTML = `
                <svg class="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Updating...
            `;

            const response = await fetch(`/admin/products/edit/${document.getElementById('productId').value}`, {
                method: 'POST',
                body: formData
            });

            const result = await response.json();
            if (!response.ok) {
                throw new Error(result.message || 'Failed to update product');
            }

            showToast('Product updated successfully!');
            setTimeout(() => window.location.href = '/admin/products', 1500);
        } catch (error) {
            console.error('Update error:', error);
            showToast(error.message || 'Failed to update product', 'error');
            document.getElementById('submitBtn').disabled = false;
            document.getElementById('submitBtn').innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                </svg>
                <span>Update Product</span>
            `;
        }
    });

    updateSubImageCount();
});
    </script>
</body>
</html>