<div class="px-3 sm:px-4 py-4 sm:py-6 bg-[var(--surface)] rounded-md shadow-sm">
    <!-- Header -->
    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4 sm:mb-6">
        <div>
            <h1 class="text-xl sm:text-2xl font-semibold text-[var(--text)]">
                Order #<span class="text-[var(--brand)]"><%= order.orderId %></span>
            </h1>
            <p class="text-xs text-gray-500 mt-1">
                Created on <%= new Date(order.orderDate).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) %>
            </p>
        </div>
        <a href="/admin/orders" class="mt-4 sm:mt-0 px-4 py-2 bg-gray-500 text-[var(--text)] rounded-md hover:bg-gray-600 text-sm focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2 transition duration-300">
            Back to Orders
        </a>
    </div>

    <!-- Alert Container -->
    <div id="alert-container" class="mb-4 sm:mb-6">
        <% if (success && success.length > 0) { %>
            <div class="bg-[var(--brand)] bg-opacity-20 text-[var(--text)] p-3 rounded-md mb-4 text-sm">
                <%= success %>
            </div>
        <% } %>
        <% if (error && error.length > 0) { %>
            <div class="bg-red-500 bg-opacity-20 text-red-500 p-3 rounded-md mb-4 text-sm">
                <%= error %>
            </div>
        <% } %>
    </div>

    <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
        <!-- Left Column -->
        <div class="space-y-6">
            <!-- Order Information Card -->
            <div class="bg-[var(--surface)] p-4 rounded-md shadow-sm">
                <div class="flex items-center justify-between mb-4">
                    <h2 class="text-base font-semibold text-[var(--text)]">Order Information</h2>
                    <span id="order-status" class="px-2 py-1 rounded-full text-xs font-semibold <%= ['cancelled', 'failed', 'return', 'return request', 'returned'].includes(order.status.toLowerCase()) ? 'bg-red-500 bg-opacity-20 text-red-500' : 'bg-[var(--brand)] bg-opacity-20 text-[var(--brand)]' %>">
                        <%= order.status %>
                    </span>
                </div>
                
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                    <div class="bg-[var(--bg)] p-3 rounded-md border-l-2 border-[var(--brand)]">
                        <p class="text-xs font-medium text-gray-500">Order ID</p>
                        <p class="text-sm font-semibold text-[var(--text)]"><%= order.orderId %></p>
                    </div>
                    
                    <div class="bg-[var(--bg)] p-3 rounded-md border-l-2 border-[var(--brand)]">
                        <p class="text-xs font-medium text-gray-500">Customer</p>
                        <p class="text-sm font-semibold text-[var(--text)]"><%= order.userId.fullname %></p>
                        <p class="text-xs text-gray-500"><%= order.userId.email %></p>
                    </div>
                    
                    <div class="bg-[var(--bg)] p-3 rounded-md border-l-2 border-[var(--brand)]">
                        <p class="text-xs font-medium text-gray-500">Payment Method</p>
                        <p class="text-sm font-semibold text-[var(--text)] capitalize"><%= order.paymentMethod %></p>
                        <p class="text-xs text-gray-500 capitalize">Status: <%= order.paymentStatus || 'N/A' %></p>
                    </div>
                    
                    <div class="bg-[var(--bg)] p-3 rounded-md border-l-2 border-[var(--brand)]">
                        <p class="text-xs font-medium text-gray-500">Order Value</p>
                        <p class="text-sm font-semibold text-[var(--text)]">
                            ₹<%= 
                                order.items && order.items.length > 0 
                                ? order.items.reduce((total, item) => {
                                    const price = parseFloat(item.itemSalePrice) || 0;
                                    const qty = parseInt(item.quantity) || 0;
                                    return total + (price * qty);
                                }, 0).toFixed(2)
                                : '0.00'
                            %>
                        </p>
                        <p class="text-xs text-gray-500">Discount: ₹<%= order.discount || 0 %></p>
                    </div>
                </div>
                
                <% if (order.cancelReason) { %>
                    <div class="mt-4 p-3 bg-red-500 bg-opacity-20 rounded-md text-sm text-red-500">
                        Cancel Reason: <%= order.cancelReason %>
                    </div>
                <% } %>
                
                <% if (order.returnRequest && order.returnRequest.isRequested) { %>
                    <div class="mt-4 p-3 bg-[var(--brand)] bg-opacity-20 rounded-md text-sm text-[var(--brand)]">
                        Return Request: <%= order.returnRequest.reason %>
                        <p class="text-xs text-gray-500 mt-1">
                            Requested: <%= new Date(order.returnRequest.requestedAt).toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) %>
                        </p>
                    </div>
                <% } %>
            </div>

            <!-- Order Items Card -->
            <div class="bg-[var(--surface)] p-4 rounded-md shadow-sm">
                <h2 class="text-base font-semibold text-[var(--text)] mb-4">
                    Order Items (<%= order.items.length %>)
                </h2>
                
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-[var(--border)]">
                        <thead class="bg-[var(--bg)]">
                            <tr>
                                <th class="px-3 py-3 text-left text-xs font-medium text-[var(--text)] uppercase tracking-wider min-w-[100px]">Product</th>
                                <th class="px-3 py-3 text-left text-xs font-medium text-[var(--text)] uppercase tracking-wider min-w-[80px]">Size</th>
                                <th class="px-3 py-3 text-left text-xs font-medium text-[var(--text)] uppercase tracking-wider min-w-[70px]">Qty</th>
                                <th class="px-3 py-3 text-left text-xs font-medium text-[var(--text)] uppercase tracking-wider min-w-[90px]">Price</th>
                                <th class="px-3 py-3 text-left text-xs font-medium text-[var(--text)] uppercase tracking-wider min-w-[90px]">Total</th>
                                <th class="px-3 py-3 text-left text-xs font-medium text-[var(--text)] uppercase tracking-wider min-w-[100px]">Status</th>
                                <th class="px-3 py-3 text-left text-xs font-medium text-[var(--text)] uppercase tracking-wider min-w-[120px]">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="bg-[var(--surface)] divide-y divide-[var(--border)]">
                            <% order.items.forEach(item => { %>
                                <tr class="hover:bg-gray-100">
                                    <td class="px-3 py-4 whitespace-nowrap text-sm text-[var(--text)] min-w-[100px]">
                                        <%= item.productId.name %>
                                    </td>
                                    <td class="px-3 py-4 whitespace-nowrap text-sm text-[var(--text)] min-w-[80px]">
                                        <%= item.size || 'N/A' %>
                                    </td>
                                    <td class="px-3 py-4 whitespace-nowrap text-sm text-[var(--text)] min-w-[70px]">
                                        <%= item.quantity %>
                                    </td>
                                    <td class="px-3 py-4 whitespace-nowrap text-sm text-[var(--text)] min-w-[90px]">
                                        ₹<%= item.itemSalePrice || 0 %>
                                    </td>
                                    <td class="px-3 py-4 whitespace-nowrap text-sm font-medium text-[var(--text)] min-w-[90px]">
                                        ₹<%= (item.quantity * (item.itemSalePrice || 0)).toFixed(2) %>
                                    </td>
                                    <td class="px-3 py-4 whitespace-nowrap">
                                        <span id="item-status-<%= item._id %>" class="px-2 py-1 rounded-full text-xs font-semibold <%= ['cancelled', 'failed', 'return request', 'returned'].includes(item.status.toLowerCase()) ? 'bg-red-500 bg-opacity-20 text-red-500' : 'bg-[var(--brand)] bg-opacity-20 text-[var(--brand)]' %>">
                                            <%= item.status %>
                                        </span>
                                    </td>
                                    <td class="px-3 py-4 whitespace-nowrap text-sm min-w-[120px]">
                                        <% if (!['delivered', 'cancelled', 'returned', 'failed'].includes(item.status)) { %>
                                            <div class="flex space-x-2">
                                                <select id="item-status-select-<%= item._id %>" class="px-2 py-1 text-xs border border-[var(--border)] rounded-md focus:ring-2 focus:ring-[var(--brand)] focus:border-[var(--brand)] transition duration-300">
                                                    <option value="pending" <%= item.status === 'pending' ? 'selected' : '' %>>Pending</option>
                                                    <option value="processing" <%= item.status === 'processing' ? 'selected' : '' %>>Processing</option>
                                                    <option value="shipped" <%= item.status === 'shipped' ? 'selected' : '' %>>Shipped</option>
                                                    <option value="delivered" <%= item.status === 'delivered' ? 'selected' : '' %>>Delivered</option>
                                                    <option value="cancelled" <%= item.status === 'cancelled' ? 'selected' : '' %>>Cancelled</option>
                                                    <option value="return request" <%= item.status === 'return request' ? 'selected' : '' %>>Return Request</option>
                                                    <option value="returned" <%= item.status === 'returned' ? 'selected' : '' %>>Returned</option>
                                                    <option value="failed" <%= item.status === 'failed' ? 'selected' : '' %>>Failed</option>
                                                </select>
                                                <button onclick="updateItemStatus('<%= order.orderId %>', '<%= item._id %>')" class="px-2 py-1 bg-[var(--brand)] text-[var(--text)] rounded-md hover:bg-[var(--brand-600)] text-xs focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2 transition duration-300">
                                                    Update
                                                </button>
                                            </div>
                                        <% } else { %>
                                            <span class="text-xs text-gray-500">Final Status</span>
                                        <% } %>
                                    </td>
                                </tr>
                            <% }) %>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Right Column -->
        <div class="space-y-6">
            <!-- Order Status Card -->
            <% if (!['delivered', 'cancelled', 'returned', 'partially returned', 'failed'].includes(order.status)) { %>
                <div class="bg-[var(--surface)] p-4 rounded-md shadow-sm">
                    <h2 class="text-base font-semibold text-[var(--text)] mb-4">Update Order Status</h2>
                    <div class="space-y-4">
                        <div>
                            <label for="status-select" class="block text-sm font-medium text-[var(--text)] mb-1">Change Status</label>
                            <select id="status-select" class="block w-full px-3 py-2 text-sm border border-[var(--border)] rounded-md focus:ring-2 focus:ring-[var(--brand)] focus:border-[var(--brand)] transition duration-300">
                                <option value="pending" <%= order.status === 'pending' ? 'selected' : '' %>>Pending</option>
                                <option value="processing" <%= order.status === 'processing' ? 'selected' : '' %>>Processing</option>
                                <option value="shipped" <%= order.status === 'shipped' ? 'selected' : '' %>>Shipped</option>
                                <option value="delivered" <%= order.status === 'delivered' ? 'selected' : '' %>>Delivered</option>
                                <option value="cancelled" <%= order.status === 'cancelled' ? 'selected' : '' %>>Cancelled</option>
                                <option value="return request" <%= order.status === 'return request' ? 'selected' : '' %>>Return Request</option>
                                <option value="returned" <%= order.status === 'returned' ? 'selected' : '' %>>Returned</option>
                                <option value="failed" <%= order.status === 'failed' ? 'selected' : '' %>>Failed</option>
                            </select>
                        </div>
                        <button id="update-status-btn" class="w-full px-4 py-2 bg-[var(--brand)] text-[var(--text)] rounded-md hover:bg-[var(--brand-600)] text-sm focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2 transition duration-300">
                            Update Status
                        </button>
                    </div>
                </div>
            <% } else { %>
                <div class="bg-[var(--bg)] p-4 rounded-md border border-[var(--border)]">
                    <h2 class="text-base font-semibold text-[var(--text)] mb-3">Order Status</h2>
                    <p class="text-sm text-gray-500">
                        This order is in a <span class="font-medium"><%= order.status %></span> state and can no longer be updated.
                    </p>
                </div>
            <% } %>

            <!-- Return Request Card -->
            <% if (order.returnRequest && order.returnRequest.isRequested) { %>
                <div id="return-request-section" class="bg-[var(--surface)] p-4 rounded-md shadow-sm">
                    <h2 class="text-base font-semibold text-[var(--text)] mb-4">Return Request</h2>
                    <div class="space-y-4">
                        <div>
                            <label for="return-action-select" class="block text-sm font-medium text-[var(--text)] mb-1">Action</label>
                            <select id="return-action-select" class="block w-full px-3 py-2 text-sm border border-[var(--border)] rounded-md focus:ring-2 focus:ring-[var(--brand)] focus:border-[var(--brand)] transition duration-300">
                                <option value="approve">Approve Return</option>
                                <option value="reject">Reject Return</option>
                            </select>
                        </div>
                        <button id="verify-return-btn" class="w-full px-4 py-2 bg-[var(--brand)] text-[var(--text)] rounded-md hover:bg-[var(--brand-600)] text-sm focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2 transition duration-300">
                            Submit Decision
                        </button>
                    </div>
                </div>
            <% } %>

            <!-- Order Summary Card -->
            <div class="bg-[var(--surface)] p-4 rounded-md shadow-sm">
                <h2 class="text-base font-semibold text-[var(--text)] mb-4">Order Summary</h2>
                <div class="space-y-2">
                    <div class="flex justify-between">
                        <span class="text-sm text-gray-500">Subtotal</span>
                        <span class="text-sm font-medium text-[var(--text)]">
                            ₹<%= 
                                order.items && order.items.length > 0 
                                ? order.items.reduce((total, item) => {
                                    const price = parseFloat(item.itemSalePrice) || 0;
                                    const qty = parseInt(item.quantity) || 0;
                                    return total + (price * qty);
                                }, 0).toFixed(2)
                                : '0.00'
                            %>
                        </span>
                    </div>
                    <div class="flex justify-between">
                        <span class="text-sm text-gray-500">Discount</span>
                        <span class="text-sm font-medium text-[var(--brand)]">-₹<%= order.discount || 0 %></span>
                    </div>
                    <div class="flex justify-between pt-2 border-t border-[var(--border)]">
                        <span class="text-base font-medium text-[var(--text)]">Total</span>
                        <span class="text-base font-bold text-[var(--brand)]">₹<%= order.amountPaid || order.totalAmount %></span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- SweetAlert2 JS -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Initialize SweetAlert2 with custom settings
        const Toast = Swal.mixin({
            toast: true,
            position: 'top-end',
            showConfirmButton: false,
            timer: 4000,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer);
                toast.addEventListener('mouseleave', Swal.resumeTimer);
            }
        });

        // Function to show alerts using SweetAlert2
        function showAlert(message, type) {
            Toast.fire({
                icon: type,
                title: message
            });
        }

        // Update Item Status
        async function updateItemStatus(orderId, itemId) {
            const selectElement = document.getElementById(`item-status-select-${itemId}`);
            if (!selectElement) {
                showAlert('Cannot update status: Item selector not found.', 'error');
                return;
            }
            const status = selectElement.value;

            try {
                const response = await fetch(`/admin/orders/update-status/${orderId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ status, itemId }),
                });

                const result = await response.json();
                if (response.ok) {
                    const statusElement = document.getElementById(`item-status-${itemId}`);
                    if (statusElement) {
                        statusElement.textContent = status;
                        statusElement.className = `px-2 py-1 rounded-full text-xs font-semibold ${['cancelled', 'failed', 'return request', 'returned'].includes(status.toLowerCase()) ? 'bg-red-500 bg-opacity-20 text-red-500' : 'bg-[var(--brand)] bg-opacity-20 text-[var(--brand)]'}`;
                    }
                    const orderStatusElement = document.getElementById('order-status');
                    if (orderStatusElement) {
                        orderStatusElement.textContent = result.orderStatus || status;
                        orderStatusElement.className = `px-2 py-1 rounded-full text-xs font-semibold ${['cancelled', 'failed', 'return', 'return request', 'returned'].includes((result.orderStatus || status).toLowerCase()) ? 'bg-red-500 bg-opacity-20 text-red-500' : 'bg-[var(--brand)] bg-opacity-20 text-[var(--brand)]'}`;
                    }
                    showAlert(result.message || 'Item status updated successfully', 'success');

                    // If item status is now final, reload page to update UI
                    if (['delivered', 'cancelled', 'returned', 'failed'].includes(status)) {
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    }
                } else {
                    console.error('Error response:', { status: response.status, result });
                    showAlert(result.message || 'Failed to update item status', 'error');
                }
            } catch (err) {
                console.error('Network error updating item status:', err);
                showAlert('Network error occurred. Please try again.', 'error');
            }
        }

        // Update Order Status
        document.getElementById('update-status-btn')?.addEventListener('click', async () => {
            const selectElement = document.getElementById('status-select');
            if (!selectElement) {
                showAlert('Cannot update status: Status selector not found.', 'error');
                return;
            }
            const status = selectElement.value;
            const orderId = '<%= order.orderId %>';

            try {
                const response = await fetch(`/admin/orders/update-status/${orderId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ status }),
                });

                const result = await response.json();
                if (response.ok) {
                    const orderStatusElement = document.getElementById('order-status');
                    if (orderStatusElement) {
                        orderStatusElement.textContent = status;
                        orderStatusElement.className = `px-2 py-1 rounded-full text-xs font-semibold ${['cancelled', 'failed', 'return', 'return request', 'returned'].includes(status.toLowerCase()) ? 'bg-red-500 bg-opacity-20 text-red-500' : 'bg-[var(--brand)] bg-opacity-20 text-[var(--brand)]'}`;
                    }
                    showAlert(result.message || 'Order status updated successfully', 'success');

                    // If status is now final, reload page to hide update section
                    if (['delivered', 'cancelled', 'returned', 'failed'].includes(status)) {
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    }

                    // Show/hide return section based on status
                    const returnSection = document.getElementById('return-request-section');
                    if (status !== 'delivered' && status !== 'return request' && returnSection) {
                        returnSection.remove();
                    } else if ((status === 'delivered' || status === 'return request') && !returnSection) {
                        window.location.reload();
                    }
                } else {
                    console.error('Error response:', { status: response.status, result });
                    showAlert(result.message || 'Failed to update order status', 'error');
                }
            } catch (err) {
                console.error('Network error updating order status:', err);
                showAlert('Network error occurred. Please try again.', 'error');
            }
        });

        // Verify Return Request
        document.getElementById('verify-return-btn')?.addEventListener('click', async () => {
            const selectElement = document.getElementById('return-action-select');
            if (!selectElement) {
                showAlert('Cannot process return: Action selector not found.', 'error');
                return;
            }
            const action = selectElement.value;
            const orderId = '<%= order.orderId %>';

            try {
                const response = await fetch(`/admin/orders/verify-return/${orderId}`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ action }),
                });

                const result = await response.json();
                if (response.ok) {
                    const orderStatusElement = document.getElementById('order-status');
                    if (orderStatusElement) {
                        const newStatus = action === 'approve' ? 'returned' : 'delivered';
                        orderStatusElement.textContent = newStatus;
                        orderStatusElement.className = `px-2 py-1 rounded-full text-xs font-semibold ${['cancelled', 'failed', 'return', 'return request', 'returned'].includes(newStatus.toLowerCase()) ? 'bg-red-500 bg-opacity-20 text-red-500' : 'bg-[var(--brand)] bg-opacity-20 text-[var(--brand)]'}`;
                    }
                    const returnSection = document.getElementById('return-request-section');
                    if (returnSection && action === 'approve') {
                        returnSection.remove();
                    }
                    showAlert(result.message || `Return request ${action}d successfully`, 'success');

                    // Reload page after 1 second to reflect final state
                    setTimeout(() => {
                        window.location.reload();
                    }, 1000);
                } else {
                    console.error('Error response:', { status: response.status, result });
                    showAlert(result.message || 'Failed to process return request', 'error');
                }
            } catch (err) {
                console.error('Network error verifying return:', err);
                showAlert('Network error occurred. Please try again.', 'error');
            }
        });
    </script>
</div>