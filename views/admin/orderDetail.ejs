<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin - Order Details</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100">
  <div class="container mx-auto p-6">
    <h1 class="text-2xl font-bold text-indigo-600 mb-6">Order Details - <%= order.orderId %></h1>

    <!-- Alert Container -->
    <div id="alert-container" class="mb-4">
      <% if (success && success.length > 0) { %>
        <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-4">
          <%= success %>
        </div>
      <% } %>
      <% if (error && error.length > 0) { %>
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4">
          <%= error %>
        </div>
      <% } %>
    </div>

    <!-- Order Info -->
    <div class="bg-white shadow rounded-lg p-6 mb-6">
      <h2 class="text-xl font-semibold mb-4">Order Information</h2>
      <p><strong>Order ID:</strong> <%= order.orderId %></p>
      <p><strong>Date:</strong> <%= new Date(order.orderDate).toLocaleDateString() %></p>
      <p><strong>User:</strong> <%= order.userId.fullname %> (<%= order.userId.email %>)</p>
      <p><strong>Total Amount:</strong> ₹<%= order.totalAmount %></p>
      <p><strong>Discount:</strong> ₹<%= order.discount || 0 %></p>
      <p><strong>Amount Paid:</strong> ₹<%= order.amountPaid || order.totalAmount %></p>
      <p><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
      <p><strong>Payment Status:</strong> <%= order.paymentStatus || 'N/A' %></p>
      <p><strong>Status:</strong> <span id="order-status"><%= order.status %></span></p>
      <% if (order.cancelReason) { %>
        <p><strong>Cancel Reason:</strong> <%= order.cancelReason %></p>
      <% } %>
      <% if (order.returnRequest && order.returnRequest.isRequested) { %>
        <p><strong>Return Request:</strong> <%= order.returnRequest.reason %> (Requested: <%= new Date(order.returnRequest.requestedAt).toLocaleDateString() %>)</p>
      <% } %>
    </div>

    <!-- Update Order Status -->
    <% if (!['delivered', 'cancelled', 'returned', 'partially returned', 'failed'].includes(order.status)) { %>
      <div class="bg-white shadow rounded-lg p-6 mb-6">
        <h2 class="text-xl font-semibold mb-4">Update Order Status</h2>
        <div class="flex flex-col sm:flex-row gap-4">
          <select id="status-select" class="p-2 border rounded w-full sm:w-1/3">
            <option value="pending" <%= order.status === 'pending' ? 'selected' : '' %>>Pending</option>
            <option value="processing" <%= order.status === 'processing' ? 'selected' : '' %>>Processing</option>
            <option value="shipped" <%= order.status === 'shipped' ? 'selected' : '' %>>Shipped</option>
            <option value="delivered" <%= order.status === 'delivered' ? 'selected' : '' %>>Delivered</option>
            <option value="cancelled" <%= order.status === 'cancelled' ? 'selected' : '' %>>Cancelled</option>
            <option value="return request" <%= order.status === 'return request' ? 'selected' : '' %>>Return Request</option>
            <option value="returned" <%= order.status === 'returned' ? 'selected' : '' %>>Returned</option>
            <option value="failed" <%= order.status === 'failed' ? 'selected' : '' %>>Failed</option>
          </select>
          <button id="update-status-btn" class="bg-indigo-600 text-white p-2 rounded hover:bg-indigo-700">Update Order Status</button>
        </div>
      </div>
    <% } else { %>
      <div class="bg-gray-100 border border-gray-300 rounded-lg p-6 mb-6">
        <h2 class="text-xl font-semibold mb-4 text-gray-600">Order Status</h2>
        <p class="text-gray-700">This order is in a final state (<strong><%= order.status %></strong>) and cannot be updated.</p>
      </div>
    <% } %>

    <!-- Return Request -->
    <% if (order.returnRequest.isRequested === true) { %>
      <div id="return-request-section" class="bg-white shadow rounded-lg p-6 mb-6">
        <h2 class="text-xl font-semibold mb-4">Verify Return Request</h2>
        <div class="flex flex-col sm:flex-row gap-4">
          <select id="return-action-select" class="p-2 border rounded w-full sm:w-1/3">
            <option value="approve">Approve Return</option>
            <option value="reject">Reject Return</option>
          </select>
          <button id="verify-return-btn" class="bg-indigo-600 text-white p-2 rounded hover:bg-indigo-700">Submit</button>
        </div>
      </div>
    <% } %>

    <!-- Order Items -->
    <div class="bg-white shadow rounded-lg p-6">
      <h2 class="text-xl font-semibold mb-4">Order Items</h2>
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Size</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quantity</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
            <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Update Status</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          <% order.items.forEach(item => { %>
            <tr>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                <%= item.productId.name %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <%= item.size || 'N/A' %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <%= item.quantity %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                ₹<%= item.itemSalePrice || 0 %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                ₹<%= (item.quantity * (item.itemSalePrice || 0)).toFixed(2) %>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <span id="item-status-<%= item._id %>"><%= item.status %></span>
              </td>
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                <% if (!['delivered', 'cancelled', 'returned', 'failed'].includes(item.status)) { %>
                  <div class="flex flex-col sm:flex-row gap-2">
                    <select id="item-status-select-<%= item._id %>" class="p-1 border rounded w-full sm:w-32">
                      <option value="pending" <%= item.status === 'pending' ? 'selected' : '' %>>Pending</option>
                      <option value="processing" <%= item.status === 'processing' ? 'selected' : '' %>>Processing</option>
                      <option value="shipped" <%= item.status === 'shipped' ? 'selected' : '' %>>Shipped</option>
                      <option value="delivered" <%= item.status === 'delivered' ? 'selected' : '' %>>Delivered</option>
                      <option value="cancelled" <%= item.status === 'cancelled' ? 'selected' : '' %>>Cancelled</option>
                      <option value="return request" <%= item.status === 'return request' ? 'selected' : '' %>>Return Request</option>
                      <option value="returned" <%= item.status === 'returned' ? 'selected' : '' %>>Returned</option>
                      <option value="failed" <%= item.status === 'failed' ? 'selected' : '' %>>Failed</option>
                    </select>
                    <button onclick="updateItemStatus('<%= order.orderId %>', '<%= item._id %>')" class="bg-indigo-600 text-white p-1 rounded hover:bg-indigo-700 text-xs">Update</button>
                  </div>
                <% } else { %>
                  <span class="text-gray-500">Final Status</span>
                <% } %>
              </td>
            </tr>
          <% }) %>
        </tbody>
      </table>
    </div>

    <a href="/admin/orders" class="mt-6 inline-block bg-gray-500 text-white p-2 rounded hover:bg-gray-600">Back to Orders</a>
  </div>

  <script>
    // Function to show alerts
    function showAlert(message, type) {
      const alertContainer = document.getElementById('alert-container');
      alertContainer.innerHTML = `
        <div class="bg-${type === 'success' ? 'green' : 'red'}-100 border-l-4 border-${type === 'success' ? 'green' : 'red'}-500 text-${type === 'success' ? 'green' : 'red'}-700 p-4 mb-4">
          ${message}
        </div>
      `;
      setTimeout(() => {
        alertContainer.innerHTML = '';
      }, 5000);
    }

    // Update Item Status
    async function updateItemStatus(orderId, itemId) {
      const status = document.getElementById(`item-status-select-${itemId}`).value;
      const csrfToken = '<%= csrfToken %>';

      try {
        const response = await fetch(`/admin/orders/update-status/${orderId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'CSRF-Token': csrfToken,
          },
          body: JSON.stringify({ status, itemId }),
        });

        const result = await response.json();
        if (response.ok) {
          document.getElementById(`item-status-${itemId}`).textContent = status;
          document.getElementById('order-status').textContent = result.orderStatus || status;
          showAlert(result.message || 'Item status updated successfully', 'success');
          
          // If item status is now final, reload page to update UI
          if (['delivered', 'cancelled', 'returned', 'failed'].includes(status)) {
            setTimeout(() => {
              window.location.reload();
            }, 2000);
          }
        } else {
          showAlert(result.message || 'Error updating item status', 'error');
        }
      } catch (err) {
        console.error('Error updating item status:', err);
        showAlert('Server error occurred', 'error');
      }
    }

    // Update Order Status
    document.getElementById('update-status-btn')?.addEventListener('click', async () => {
      const status = document.getElementById('status-select').value;
      const orderId = '<%= order.orderId %>';
      const csrfToken = '<%= csrfToken %>';

      try {
        const response = await fetch(`/admin/orders/update-status/${orderId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
            'CSRF-Token': csrfToken,
          },
          body: JSON.stringify({ status }),
        });

        const result = await response.json();
        if (response.ok) {
          document.getElementById('order-status').textContent = status;
          showAlert(result.message || 'Order status updated successfully', 'success');
          
          // If status is now final, reload page to hide update section
          if (['delivered', 'cancelled', 'returned', 'failed'].includes(status)) {
            setTimeout(() => {
              window.location.reload();
            }, 2000);
          }
          
          // Show/hide return section based on status
          const returnSection = document.getElementById('return-request-section');
          if (status !== 'delivered' && status !== 'return request' && returnSection) {
            returnSection.remove();
          } else if ((status === 'delivered' || status === 'return request') && !returnSection) {
            window.location.reload();
          }
        } else {
          showAlert(result.message || 'Error updating order status', 'error');
        }
      } catch (err) {
        console.error('Error updating status:', err);
        showAlert('Server error occurred', 'error');
      }
    });

    // Verify Return Request
    document.getElementById('verify-return-btn')?.addEventListener('click', async () => {
      const action = document.getElementById('return-action-select').value;
      const orderId = '<%= order.orderId %>';
      const csrfToken = '<%= csrfToken %>';

      try {
        const response = await fetch(`/admin/orders/verify-return/${orderId}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
            'CSRF-Token': csrfToken,
          },
          body: JSON.stringify({ action }),
        });

        const result = await response.json();
        if (response.ok) {
          if (action === 'approve') {
            document.getElementById('order-status').textContent = 'returned';
            document.getElementById('return-request-section').remove();
          } else {
            document.getElementById('order-status').textContent = 'delivered';
          }
          showAlert(result.message || `Return request ${action}d successfully`, 'success');
          
          // Reload page after 2 seconds to reflect final state
          setTimeout(() => {
            window.location.reload();
          }, 2000);
        } else {
          showAlert(result.message || 'Error processing return request', 'error');
        }
      } catch (err) {
        console.error('Error verifying return:', err);
        showAlert('Server error occurred', 'error');
      }
    });
  </script>
</body>
</html>