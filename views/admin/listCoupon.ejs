<div class="px-3 sm:px-4 py-4 sm:py-6 bg-[var(--surface)] rounded-md shadow-sm">
    <div class="bg-[var(--surface)] rounded-md shadow-sm p-4 sm:p-6">
        <h2 class="text-xl sm:text-2xl font-semibold text-[var(--text)] mb-4 sm:mb-6">Coupon Management</h2>

        <form id="couponForm" class="space-y-4 mb-6 sm:mb-8">
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-3">
                <div class="relative">
                    <input type="text" name="code" placeholder="Coupon Code" class="px-3 py-2 border border-[var(--border)] rounded-md w-full focus:ring-2 focus:ring-[var(--brand)] focus:border-[var(--brand)] transition text-sm" />
                    <div class="text-red-500 text-xs mt-1" id="error-code"></div>
                </div>
                <div class="relative">
                    <input type="number" name="discountAmount" placeholder="Discount Amount" class="px-3 py-2 border border-[var(--border)] rounded-md w-full focus:ring-2 focus:ring-[var(--brand)] focus:border-[var(--brand)] transition text-sm" />
                    <div class="text-red-500 text-xs mt-1" id="error-discountAmount"></div>
                </div>
                <div class="relative">
                    <input type="number" name="minCartAmount" placeholder="Min Cart Amount" class="px-3 py-2 border border-[var(--border)] rounded-md w-full focus:ring-2 focus:ring-[var(--brand)] focus:border-[var(--brand)] transition text-sm" />
                    <div class="text-red-500 text-xs mt-1" id="error-minCartAmount"></div>
                </div>
                <div class="relative">
                    <input type="date" name="expiresAt" class="px-3 py-2 border border-[var(--border)] rounded-md w-full focus:ring-2 focus:ring-[var(--brand)] focus:border-[var(--brand)] transition text-sm" />
                    <div class="text-red-500 text-xs mt-1" id="error-expiresAt"></div>
                </div>
            </div>
            <button type="submit" class="px-4 py-2 bg-[var(--brand)] text-[var(--text)] rounded-md hover:bg-[var(--brand-600)] transition w-full text-sm focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2">Create Coupon</button>
        </form>

        <!-- Edit Coupon Modal -->
        <div id="editModal" class="fixed inset-0 bg-[var(--bg)] bg-opacity-50 hidden flex items-center justify-center z-50 p-2 sm:p-4">
            <div class="bg-[var(--surface)] rounded-md p-4 sm:p-6 w-full max-w-md sm:max-w-lg relative max-h-[90vh] overflow-y-auto">
                <h3 class="text-base sm:text-lg font-semibold text-[var(--text)] mb-3 sm:mb-4">Edit Coupon</h3>
                <form id="editCouponForm" class="space-y-3">
                    <input type="hidden" name="id" id="edit-id" />
                    <div class="relative">
                        <label for="edit-code" class="block text-xs font-medium text-[var(--text)] mb-1">Coupon Code</label>
                        <input type="text" name="code" id="edit-code" placeholder="Coupon Code" class="px-3 py-2 border border-[var(--border)] rounded-md w-full focus:ring-2 focus:ring-[var(--brand)] focus:border-[var(--brand)] transition text-sm" />
                        <div class="text-red-500 text-xs mt-1" id="error-edit-code"></div>
                    </div>
                    <div class="relative">
                        <label for="edit-discountAmount" class="block text-xs font-medium text-[var(--text)] mb-1">Discount Amount</label>
                        <input type="number" name="discountAmount" id="edit-discountAmount" placeholder="Discount Amount" class="px-3 py-2 border border-[var(--border)] rounded-md w-full focus:ring-2 focus:ring-[var(--brand)] focus:border-[var(--brand)] transition text-sm" />
                        <div class="text-red-500 text-xs mt-1" id="error-edit-discountAmount"></div>
                    </div>
                    <div class="relative">
                        <label for="edit-minCartAmount" class="block text-xs font-medium text-[var(--text)] mb-1">Minimum Cart Amount</label>
                        <input type="number" name="minCartAmount" id="edit-minCartAmount" placeholder="Min Cart Amount" class="px-3 py-2 border border-[var(--border)] rounded-md w-full focus:ring-2 focus:ring-[var(--brand)] focus:border-[var(--brand)] transition text-sm" />
                        <div class="text-red-500 text-xs mt-1" id="error-edit-minCartAmount"></div>
                    </div>
                    <div class="relative">
                        <label for="edit-expiresAt" class="block text-xs font-medium text-[var(--text)] mb-1">Expiration Date</label>
                        <input type="date" name="expiresAt" id="edit-expiresAt" class="px-3 py-2 border border-[var(--border)] rounded-md w-full focus:ring-2 focus:ring-[var(--brand)] focus:border-[var(--brand)] transition text-sm" />
                        <div class="text-red-500 text-xs mt-1" id="error-edit-expiresAt"></div>
                    </div>
                    <div class="relative">
                        <label for="edit-isActive" class="block text-xs font-medium text-[var(--text)] mb-1">Status</label>
                        <select name="isActive" id="edit-isActive" class="px-3 py-2 border border-[var(--border)] rounded-md w-full focus:ring-2 focus:ring-[var(--brand)] focus:border-[var(--brand)] transition text-sm">
                            <option value="true">Active</option>
                            <option value="false">Inactive</option>
                        </select>
                    </div>
                    <div class="flex justify-end gap-3 pt-4">
                        <button type="button" onclick="closeEditModal()" class="px-4 py-2 bg-gray-500 text-[var(--text)] rounded-md hover:bg-gray-600 transition text-sm focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2">Cancel</button>
                        <button type="submit" class="px-4 py-2 bg-[var(--brand)] text-[var(--text)] rounded-md hover:bg-[var(--brand-600)] transition text-sm focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2">Update</button>
                    </div>
                </form>
            </div>
        </div>

        <hr class="my-4 sm:my-6 border-[var(--border)]" />

        <div class="overflow-x-auto">
            <table class="w-full border border-[var(--border)] text-xs sm:text-sm">
                <thead class="bg-[var(--bg)] text-[var(--text)]">
                    <tr>
                        <th class="px-3 py-2 text-left">Code</th>
                        <th class="px-3 py-2 text-left">Discount</th>
                        <th class="px-3 py-2 text-left hidden sm:table-cell">Min Cart</th>
                        <th class="px-3 py-2 text-left">Expires</th>
                        <th class="px-3 py-2 text-left">Status</th>
                        <th class="px-3 py-2 text-left">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% coupons.forEach(coupon => { %>
                        <tr class="border-b border-[var(--border)] hover:bg-gray-100">
                            <td class="px-3 py-2 text-[var(--text)]"><%= coupon.code %></td>
                            <td class="px-3 py-2 text-[var(--text)]"><%= coupon.discountAmount %></td>
                            <td class="px-3 py-2 text-[var(--text)] hidden sm:table-cell"><%= coupon.minCartAmount || '-' %></td>
                            <td class="px-3 py-2 text-[var(--text)] whitespace-nowrap"><%= new Date(coupon.expiresAt).toLocaleDateString() %></td>
                            <td class="px-3 py-2">
                                <span class="<%= coupon.isActive ? 'text-[var(--brand)]' : 'text-red-500' %>">
                                    <%= coupon.isActive ? 'Active' : 'Inactive' %>
                                </span>
                            </td>
                            <td class="px-3 py-2 flex gap-2">
                                <button onclick="openEditModal({
                                    _id: '<%= coupon._id %>',
                                    code: '<%= coupon.code %>',
                                    discountAmount: '<%= coupon.discountAmount %>',
                                    minCartAmount: <%= coupon.minCartAmount || 'null' %>,
                                    expiresAt: '<%= coupon.expiresAt %>',
                                    isActive: <%= coupon.isActive %>
                                })" class="text-[var(--brand)] hover:text-[var(--brand-600)] text-xs focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2 transition">Edit</button>
                                <button onclick="deleteCoupon('<%= coupon._id %>')" class="text-red-500 hover:text-red-600 text-xs focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2 transition">Delete</button>
                            </td>
                        </tr>
                    <% }) %>
                    <% if (!coupons || coupons.length === 0) { %>
                        <tr>
                            <td colspan="6" class="px-3 py-4 text-center text-[var(--text)] text-sm">No coupons found</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Pagination -->
    <% if (totalPages > 1) { %>
        <div class="mt-4 sm:mt-6 flex flex-col sm:flex-row justify-between items-center gap-3">
            <p class="text-xs text-gray-500">
                Showing <span class="font-medium"><%= ((page - 1) * limit) + 1 %></span> to <span class="font-medium"><%= Math.min(page * limit, totalCoupons) %></span> of <span class="font-medium"><%= totalCoupons %></span> results
            </p>
            <div class="flex flex-wrap gap-1 justify-center">
                <% if (page > 1) { %>
                    <a href="/admin/coupons/list?page=1" class="px-2 sm:px-3 py-1 border border-[var(--border)] bg-[var(--surface)] text-[var(--text)] rounded-md hover:bg-gray-100 text-xs focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2 transition">First</a>
                    <a href="/admin/coupons/list?page=<%= page - 1 %>" class="px-2 sm:px-3 py-1 border border-[var(--border)] bg-[var(--surface)] text-[var(--text)] rounded-md hover:bg-gray-100 text-xs focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2 transition">Prev</a>
                <% } %>

                <% const maxVisiblePages = 5;
                   let startPage = Math.max(1, page - Math.floor(maxVisiblePages / 2));
                   let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);
                   
                   if (endPage - startPage + 1 < maxVisiblePages) {
                       startPage = Math.max(1, endPage - maxVisiblePages + 1);
                   }
                   
                   for (let i = startPage; i <= endPage; i++) { %>
                    <a href="/admin/coupons/list?page=<%= i %>" class="px-2 sm:px-3 py-1 border border-[var(--border)] <%= i === page ? 'bg-[var(--brand)] text-[var(--text)]' : 'bg-[var(--surface)] text-[var(--text)] hover:bg-gray-100' %> rounded-md text-xs focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2 transition"><%= i %></a>
                <% } %>

                <% if (page < totalPages) { %>
                    <a href="/admin/coupons/list?page=<%= page + 1 %>" class="px-2 sm:px-3 py-1 border border-[var(--border)] bg-[var(--surface)] text-[var(--text)] rounded-md hover:bg-gray-100 text-xs focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2 transition">Next</a>
                    <a href="/admin/coupons/list?page=<%= totalPages %>" class="px-2 sm:px-3 py-1 border border-[var(--border)] bg-[var(--surface)] text-[var(--text)] rounded-md hover:bg-gray-100 text-xs focus:ring-2 focus:ring-[var(--brand)] focus:ring-offset-2 transition">Last</a>
                <% } %>
            </div>
        </div>
    <% } %>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    // Store coupon data for easier access
    let couponData = {};

    // Toast configuration
    const Toast = Swal.mixin({
        toast: true,
        position: 'top-end',
        showConfirmButton: false,
        timer: 4000,
        timerProgressBar: true,
        didOpen: (toast) => {
            toast.addEventListener('mouseenter', Swal.stopTimer);
            toast.addEventListener('mouseleave', Swal.resumeTimer);
        }
    });

    // Validation function
    function validateFormData(data, prefix = '') {
        const errors = {};

        // Coupon Code: Required, min 3 chars, alphanumeric or hyphens
        if (!data.code) {
            errors[`${prefix}code`] = 'Coupon code is required';
        } else if (data.code.length < 3) {
            errors[`${prefix}code`] = 'Coupon code must be at least 3 characters';
        } else if (!/^[a-zA-Z0-9-]+$/.test(data.code)) {
            errors[`${prefix}code`] = 'Coupon code can only contain letters, numbers, or hyphens';
        }

        // Discount Amount: Required, positive number
        if (!data.discountAmount) {
            errors[`${prefix}discountAmount`] = 'Discount amount is required';
        } else if (isNaN(data.discountAmount) || Number(data.discountAmount) < 1) {
            errors[`${prefix}discountAmount`] = 'Discount amount must be a positive number';
        }

        // Min Cart Amount: Optional, non-negative number
        if (data.minCartAmount && (isNaN(data.minCartAmount) || Number(data.minCartAmount) < 0)) {
            errors[`${prefix}minCartAmount`] = 'Minimum cart amount must be non-negative';
        }

        // Expires At: Required, not in the past
        if (!data.expiresAt) {
            errors[`${prefix}expiresAt`] = 'Expiration date is required';
        } else {
            const today = new Date();
            today.setHours(0, 0, 0, 0); // Normalize to start of day
            const expires = new Date(data.expiresAt);
            if (expires < today) {
                errors[`${prefix}expiresAt`] = 'Expiration date cannot be in the past';
            }
        }

        return errors;
    }

    // Clear error messages
    function clearErrors(prefix = '') {
        const fields = ['code', 'discountAmount', 'minCartAmount', 'expiresAt'];
        fields.forEach(field => {
            const errorElement = document.getElementById(`error-${prefix}${field}`);
            if (errorElement) {
                errorElement.innerText = '';
            }
        });
    }

    // Create Coupon Form Submission
    document.getElementById('couponForm').addEventListener('submit', async function (e) {
        e.preventDefault();
        const form = e.target;
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        // Clear previous errors
        clearErrors();

        // Validate form data
        const errors = validateFormData(data);
        if (Object.keys(errors).length > 0) {
            Object.keys(errors).forEach(key => {
                const errorElement = document.getElementById(`error-${key}`);
                if (errorElement) {
                    errorElement.innerText = errors[key];
                }
            });
            return;
        }

        try {
            const res = await fetch('/admin/coupons/create', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data),
            });

            const result = await res.json();
            if (res.ok) {
                Toast.fire({
                    icon: 'success',
                    title: result.message || 'Coupon created successfully!'
                });
                form.reset();
                setTimeout(() => window.location.reload(), 1000);
            } else {
                Toast.fire({
                    icon: 'error',
                    title: result.error || 'Failed to create coupon'
                });
            }
        } catch (err) {
            Toast.fire({
                icon: 'error',
                title: 'Something went wrong. Please try again.'
            });
            console.error('Error:', err);
        }
    });

    // Edit Coupon Form Submission
    document.getElementById('editCouponForm').addEventListener('submit', async function (e) {
        e.preventDefault();
        const form = e.target;
        const id = form.id.value;
        const data = {
            code: form.code.value,
            discountAmount: form.discountAmount.value,
            minCartAmount: form.minCartAmount.value,
            expiresAt: form.expiresAt.value,
            isActive: form.isActive.value,
        };

        // Clear previous errors
        clearErrors('edit-');

        // Validate form data
        const errors = validateFormData(data, 'edit-');
        if (Object.keys(errors).length > 0) {
            Object.keys(errors).forEach(key => {
                const errorElement = document.getElementById(`error-${key}`);
                if (errorElement) {
                    errorElement.innerText = errors[key];
                }
            });
            return;
        }

        try {
            const res = await fetch(`/admin/coupons/edit/${id}`, {
                method: 'PUT',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(data),
            });

            const result = await res.json();
            if (res.ok) {
                Toast.fire({
                    icon: 'success',
                    title: result.message || 'Coupon updated successfully!'
                });
                setTimeout(() => {
                    closeEditModal();
                    window.location.reload();
                }, 1000);
            } else {
                Toast.fire({
                    icon: 'error',
                    title: result.error || 'Update failed'
                });
            }
        } catch (err) {
            Toast.fire({
                icon: 'error',
                title: 'Server error. Please try again.'
            });
            console.error('Error:', err);
        }
    });

    // Delete Coupon
    async function deleteCoupon(id) {
        const { isConfirmed } = await Swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: 'var(--brand)',
            cancelButtonColor: '#ef4444',
            confirmButtonText: 'Yes, delete it!'
        });

        if (!isConfirmed) return;

        try {
            const res = await fetch(`/admin/coupons/delete/${id}`, {
                method: 'PATCH',
            });

            const result = await res.json();
            if (res.ok) {
                Toast.fire({
                    icon: 'success',
                    title: result.message || 'Coupon deleted successfully!'
                });
                setTimeout(() => window.location.reload(), 1000);
            } else {
                Toast.fire({
                    icon: 'error',
                    title: result.error || 'Failed to delete coupon'
                });
            }
        } catch (err) {
            Toast.fire({
                icon: 'error',
                title: 'Error deleting coupon. Please try again.'
            });
            console.error('Error:', err);
        }
    }

    // Open Edit Modal
    function openEditModal(coupon) {
        console.log('Opening edit modal for coupon:', coupon);

        try {
            document.getElementById('edit-id').value = coupon._id || '';
            document.getElementById('edit-code').value = coupon.code || '';
            document.getElementById('edit-discountAmount').value = coupon.discountAmount || '';
            document.getElementById('edit-minCartAmount').value = coupon.minCartAmount || '';

            if (coupon.expiresAt) {
                const date = new Date(coupon.expiresAt);
                const formattedDate = date.toISOString().split('T')[0];
                document.getElementById('edit-expiresAt').value = formattedDate;
            }

            document.getElementById('edit-isActive').value = coupon.isActive ? 'true' : 'false';

            clearErrors('edit-');

            document.getElementById('editModal').classList.remove('hidden');
        } catch (error) {
            console.error('Error opening edit modal:', error);
            Toast.fire({
                icon: 'error',
                title: 'Error opening edit form. Please try again.'
            });
        }
    }

    // Close Edit Modal
    function closeEditModal() {
        document.getElementById('editModal').classList.add('hidden');
        document.getElementById('editCouponForm').reset();
        clearErrors('edit-');
    }

    // Close modal when clicking outside
    document.getElementById('editModal').addEventListener('click', function(e) {
        if (e.target === this) {
            closeEditModal();
        }
    });
</script>