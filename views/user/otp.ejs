<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RYZO BAGS - OTP Verification</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Permanent+Marker&display=swap" rel="stylesheet">
    <style>
        .brand-font { font-family: 'Permanent Marker', cursive; color: black; }
        .otp-input:focus { outline: none; border-color: #3b82f6; }
        .error { color: red; font-size: 0.875rem; }
        #toast-container { position: fixed; top: 1rem; right: 1rem; z-index: 1000; }
        .toast { background: #333; color: white; padding: 10px 20px; border-radius: 5px; margin-bottom: 10px; opacity: 0.9; }
        .toast.error { background: #dc2626; }
        .toast.success { background: #16a34a; }
        .loading { opacity: 0.6; pointer-events: none; }
        .timer-expired { color: #dc2626; font-weight: bold; }
        .timer-active { color: #16a34a; }
        .timer-warning { color: #f59e0b; }
    </style>
</head>
<body class="min-h-screen flex items-center justify-center bg-[#a0d8d8] p-4">
    <div class="bg-white shadow-lg rounded-lg overflow-hidden max-w-3xl w-full p-8">
        <div class="text-center">
            <h1 class="brand-font text-3xl">RYZO BAGS</h1>
            <h2 class="text-xl font-semibold mt-4">OTP Verification</h2>
            <p class="text-gray-600 mt-2">Enter the OTP sent to your email</p>
        </div>
        
        <div id="toast-container"></div>
        <form id="otpForm" class="mt-6">
            <div class="flex justify-center gap-3" id="otpContainer">
                <!-- OTP inputs with error spans -->
                <div class="text-center">
                    <input type="text" class="otp-input w-12 h-12 text-center border border-gray-300 rounded-md text-lg" maxlength="1" data-index="0" inputmode="numeric" pattern="[0-9]">
                    <p class="error hidden">Required</p>
                </div>
                <div class="text-center">
                    <input type="text" class="otp-input w-12 h-12 text-center border border-gray-300 rounded-md text-lg" maxlength="1" data-index="1" inputmode="numeric" pattern="[0-9]">
                    <p class="error hidden">Required</p>
                </div>
                <div class="text-center">
                    <input type="text" class="otp-input w-12 h-12 text-center border border-gray-300 rounded-md text-lg" maxlength="1" data-index="2" inputmode="numeric" pattern="[0-9]">
                    <p class="error hidden">Required</p>
                </div>
                <div class="text-center">
                    <input type="text" class="otp-input w-12 h-12 text-center border border-gray-300 rounded-md text-lg" maxlength="1" data-index="3" inputmode="numeric" pattern="[0-9]">
                    <p class="error hidden">Required</p>
                </div>
                <div class="text-center">
                    <input type="text" class="otp-input w-12 h-12 text-center border border-gray-300 rounded-md text-lg" maxlength="1" data-index="4" inputmode="numeric" pattern="[0-9]">
                    <p class="error hidden">Required</p>
                </div>
                <div class="text-center">
                    <input type="text" class="otp-input w-12 h-12 text-center border border-gray-300 rounded-md text-lg" maxlength="1" data-index="5" inputmode="numeric" pattern="[0-9]">
                    <p class="error hidden">Required</p>
                </div>
            </div>
            
            <p id="timer" class="text-center mt-4">
                OTP expires in: <span id="countdown" class="timer-active font-semibold">01:00</span>
            </p>
            
            <button type="submit" id="verifyBtn" class="w-full bg-indigo-600 hover:bg-indigo-700 text-white py-3 rounded-md mt-6 text-lg font-semibold transition-colors">
                Verify OTP
            </button>
            <button type="button" id="resendOtp" class="w-full bg-gray-200 hover:bg-gray-300 text-gray-700 py-3 rounded-md mt-4 text-lg font-semibold transition-colors" disabled>
                Resend OTP
            </button>
        </form>
    </div>

    <script>
    document.addEventListener("DOMContentLoaded", function() {
        const inputs = document.querySelectorAll(".otp-input");
        const form = document.getElementById("otpForm");
        const countdownElement = document.getElementById("countdown");
        const submitBtn = document.getElementById("verifyBtn");
        const resendBtn = document.getElementById("resendOtp");
        const toastContainer = document.getElementById("toast-container");
        
        let timer = 60; // 1 minute in seconds
        let countdownInterval = null;
        let resendTimer = 0;
        let resendInterval = null;
        let isTimerRunning = false;
        
        // Storage keys
        const STORAGE_KEYS = {
            OTP_START_TIME: 'otp_start_time',
            OTP_DURATION: 'otp_duration',
            OTP_EXPIRED: 'otp_expired',
            RESEND_START_TIME: 'resend_start_time',
            RESEND_DURATION: 'resend_duration'
        };

        // Storage helper functions (using memory storage for Claude.ai compatibility)
        const memoryStorage = {};
        
        function setStorageItem(key, value) {
            memoryStorage[key] = JSON.stringify(value);
        }
        
        function getStorageItem(key) {
            const item = memoryStorage[key];
            return item ? JSON.parse(item) : null;
        }
        
        function removeStorageItem(key) {
            delete memoryStorage[key];
        }

        // Enhanced OTP input handling
        inputs.forEach((input, index) => {
            // Only allow numbers
            input.addEventListener('input', function(e) {
                let value = this.value.replace(/[^0-9]/g, '');
                this.value = value;
                
                if (value.length === 1) {
                    // Move to next input if available
                    if (index < inputs.length - 1) {
                        inputs[index + 1].focus();
                    } else {
                        // Last input - blur to hide keyboard on mobile
                        this.blur();
                    }
                }
                
                // Hide error if present
                this.nextElementSibling.classList.add("hidden");
            });
            
            // Handle keydown for backspace and navigation
            input.addEventListener('keydown', function(e) {
                if (e.key === 'Backspace') {
                    if (this.value === '' && index > 0) {
                        // Move to previous input if current is empty
                        inputs[index - 1].focus();
                        inputs[index - 1].value = '';
                    } else {
                        // Clear current input
                        this.value = '';
                    }
                } else if (e.key === 'ArrowLeft' && index > 0) {
                    inputs[index - 1].focus();
                } else if (e.key === 'ArrowRight' && index < inputs.length - 1) {
                    inputs[index + 1].focus();
                }
            });
            
            // Handle paste event
            input.addEventListener('paste', function(e) {
                e.preventDefault();
                const pasteData = e.clipboardData.getData('text/plain');
                const pasteDigits = pasteData.replace(/\D/g, '').split('');
                
                // Fill inputs with pasted data
                pasteDigits.forEach((digit, i) => {
                    if (index + i < inputs.length) {
                        inputs[index + i].value = digit;
                        inputs[index + i].nextElementSibling.classList.add("hidden");
                    }
                });
                
                // Focus last filled input or next empty input
                const lastFilledIndex = Math.min(index + pasteDigits.length - 1, inputs.length - 1);
                if (lastFilledIndex < inputs.length - 1) {
                    inputs[lastFilledIndex + 1].focus();
                } else {
                    inputs[lastFilledIndex].focus();
                }
            });
        });

        function showToast(message, type = 'info') {
            const toast = document.createElement("div");
            toast.className = `toast ${type}`;
            toast.innerText = message;
            toastContainer.appendChild(toast);
            
            // Auto remove toast after 5 seconds
            setTimeout(() => {
                if (toast.parentNode) {
                    toast.remove();
                }
            }, 5000);
        }

        function formatTime(seconds) {
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = seconds % 60;
            return `${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
        }

        function startTimer(duration = 60, isResume = false) {
            console.log("Starting timer with duration:", duration, "isResume:", isResume);
            
            // Clear any existing interval
            if (countdownInterval) {
                clearInterval(countdownInterval);
            }
            
            // Only save new start time if this is not a resume
            if (!isResume) {
                const startTime = Date.now();
                setStorageItem(STORAGE_KEYS.OTP_START_TIME, startTime);
                setStorageItem(STORAGE_KEYS.OTP_DURATION, duration);
                removeStorageItem(STORAGE_KEYS.OTP_EXPIRED);
            }
            
            // Set timer state
            timer = duration;
            isTimerRunning = true;
            
            // Enable submit button
            submitBtn.disabled = false;
            submitBtn.classList.remove('loading');
            submitBtn.textContent = 'Verify OTP';
            
            // Update initial display
            countdownElement.textContent = formatTime(timer);
            countdownElement.className = 'timer-active font-semibold';
            
            countdownInterval = setInterval(() => {
                timer--;
                
                // Update display
                countdownElement.textContent = formatTime(timer);
                
                // Change color based on remaining time
                if (timer <= 0) {
                    // Timer expired
                    clearInterval(countdownInterval);
                    countdownInterval = null;
                    isTimerRunning = false;
                    
                    // Mark as expired in storage
                    setStorageItem(STORAGE_KEYS.OTP_EXPIRED, true);
                    
                    countdownElement.textContent = "Expired";
                    countdownElement.className = 'timer-expired font-semibold';
                    
                    submitBtn.disabled = true;
                    submitBtn.textContent = 'OTP Expired';
                    
                    // Enable resend button if not in cooldown
                    if (resendTimer <= 0) {
                        resendBtn.disabled = false;
                        resendBtn.textContent = 'Resend OTP';
                    }
                    
                    showToast("OTP has expired. Please request a new one.", "error");
                } else if (timer <= 30) {
                    // Warning state (last 30 seconds)
                    countdownElement.className = 'timer-warning font-semibold';
                } else if (timer <= 60) {
                    // Warning state (last minute)
                    countdownElement.className = 'timer-warning font-semibold';
                }
            }, 1000);
        }

        function startResendTimer(duration = 60) {
            console.log("Starting resend timer with duration:", duration);
            
            // Clear any existing resend interval
            if (resendInterval) {
                clearInterval(resendInterval);
            }
            
            // Save resend timer start time
            const startTime = Date.now();
            setStorageItem(STORAGE_KEYS.RESEND_START_TIME, startTime);
            setStorageItem(STORAGE_KEYS.RESEND_DURATION, duration);
            
            resendTimer = duration;
            resendBtn.disabled = true;
            
            // Update button text with countdown
            resendBtn.textContent = `Resend OTP (${resendTimer}s)`;
            
            resendInterval = setInterval(() => {
                resendTimer--;
                
                if (resendTimer <= 0) {
                    // Resend timer expired
                    clearInterval(resendInterval);
                    resendInterval = null;
                    
                    // Clear resend storage
                    removeStorageItem(STORAGE_KEYS.RESEND_START_TIME);
                    removeStorageItem(STORAGE_KEYS.RESEND_DURATION);
                    
                    // Enable resend button
                    resendBtn.disabled = false;
                    resendBtn.textContent = 'Resend OTP';
                } else {
                    // Update button text with remaining time
                    resendBtn.textContent = `Resend OTP (${resendTimer}s)`;
                }
            }, 1000);
        }

        function initializeTimer() {
            console.log("Initializing timer...");
            
            const startTime = getStorageItem(STORAGE_KEYS.OTP_START_TIME);
            const duration = getStorageItem(STORAGE_KEYS.OTP_DURATION);
            const expired = getStorageItem(STORAGE_KEYS.OTP_EXPIRED);
            
            console.log("Stored values:", { startTime, duration, expired });
            
            if (expired) {
                // OTP was already expired
                console.log("OTP is already expired");
                timer = 0;
                isTimerRunning = false;
                
                countdownElement.textContent = "Expired";
                countdownElement.className = 'timer-expired font-semibold';
                
                submitBtn.disabled = true;
                submitBtn.textContent = 'OTP Expired';
                
                return;
            }
            
            if (startTime && duration) {
                // Calculate remaining time
                const now = Date.now();
                const elapsed = Math.floor((now - startTime) / 1000);
                const remaining = duration - elapsed;
                
                console.log("Time calculation:", { elapsed, remaining, duration });
                
                if (remaining > 0) {
                    // Resume timer with remaining time
                    console.log("Resuming timer with", remaining, "seconds remaining");
                    startTimer(remaining, true);
                } else {
                    // Timer should have expired
                    console.log("Timer should have expired");
                    timer = 0;
                    isTimerRunning = false;
                    
                    setStorageItem(STORAGE_KEYS.OTP_EXPIRED, true);
                    
                    countdownElement.textContent = "Expired";
                    countdownElement.className = 'timer-expired font-semibold';
                    
                    submitBtn.disabled = true;
                    submitBtn.textContent = 'OTP Expired';
                }
            } else {
                // No stored timer, start fresh
                console.log("No stored timer, starting fresh");
                startTimer(60); // 1 minute
            }
        }

        function initializeResendTimer() {
            console.log("Initializing resend timer...");
            
            const resendStartTime = getStorageItem(STORAGE_KEYS.RESEND_START_TIME);
            const resendDuration = getStorageItem(STORAGE_KEYS.RESEND_DURATION);
            
            if (resendStartTime && resendDuration) {
                const now = Date.now();
                const elapsed = Math.floor((now - resendStartTime) / 1000);
                const remaining = resendDuration - elapsed;
                
                console.log("Resend time calculation:", { elapsed, remaining, resendDuration });
                
                if (remaining > 0) {
                    // Resume resend timer
                    console.log("Resuming resend timer with", remaining, "seconds remaining");
                    startResendTimer(remaining);
                } else {
                    // Resend timer expired
                    console.log("Resend timer expired");
                    removeStorageItem(STORAGE_KEYS.RESEND_START_TIME);
                    removeStorageItem(STORAGE_KEYS.RESEND_DURATION);
                    resendBtn.disabled = false;
                    resendBtn.textContent = 'Resend OTP';
                }
            } else {
                // No resend timer, enable button if OTP expired
                if (timer <= 0) {
                    resendBtn.disabled = false;
                    resendBtn.textContent = 'Resend OTP';
                } else {
                    resendBtn.disabled = true;
                    resendBtn.textContent = 'Resend OTP';
                }
            }
        }

        // Initialize timers on page load
        initializeTimer();
        initializeResendTimer();

        form.addEventListener("submit", async function(event) {
            event.preventDefault();
            
            console.log("Form submitted");
            
            // Check if timer expired
            if (timer <= 0) {
                showToast("OTP has expired. Please request a new one.", "error");
                return;
            }
            
            // Disable button and show loading state
            submitBtn.disabled = true;
            submitBtn.classList.add('loading');
            submitBtn.textContent = 'Verifying...';
            
            let isValid = true;
            let otpValue = "";
            
            inputs.forEach((input, index) => {
                if (!input.value.trim()) {
                    isValid = false;
                    input.nextElementSibling.classList.remove("hidden");
                } else {
                    input.nextElementSibling.classList.add("hidden");
                    otpValue += input.value;
                }
            });
            
            if (!isValid) {
                showToast("Please fill in all OTP fields", "error");
                submitBtn.disabled = false;
                submitBtn.classList.remove('loading');
                submitBtn.textContent = 'Verify OTP';
                return;
            }
            
            if (otpValue.length !== 6) {
                showToast("OTP must be 6 digits", "error");
                submitBtn.disabled = false;
                submitBtn.classList.remove('loading');
                submitBtn.textContent = 'Verify OTP';
                return;
            }
            
            console.log("Sending OTP:", otpValue);
            
            try {
                // Make actual API call to verify OTP
                const response = await fetch('/user/verify-otp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    credentials: 'include', // Important for session cookies
                    body: JSON.stringify({ 
                        otp: otpValue 
                    })
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    // Clear timer on successful verification
                    if (countdownInterval) {
                        clearInterval(countdownInterval);
                        countdownInterval = null;
                        isTimerRunning = false;
                    }
                    
                    // Clear storage
                    removeStorageItem(STORAGE_KEYS.OTP_START_TIME);
                    removeStorageItem(STORAGE_KEYS.OTP_DURATION);
                    removeStorageItem(STORAGE_KEYS.OTP_EXPIRED);
                    
                    showToast(data.message || "OTP verified successfully!", "success");
                    setTimeout(() => {
                        // Redirect to appropriate page
                        window.location.href = data.redirect || "/user/login";
                    }, 1500);
                } else {
                    showToast(data.message || "Invalid OTP. Please try again.", "error");
                    submitBtn.disabled = false;
                    submitBtn.classList.remove('loading');
                    submitBtn.textContent = 'Verify OTP';
                }
                
            } catch (error) {
                console.error("Verification error:", error);
                showToast("Network error. Please check your connection and try again.", "error");
                submitBtn.disabled = false;
                submitBtn.classList.remove('loading');
                submitBtn.textContent = 'Verify OTP';
            }
        });

        resendBtn.addEventListener("click", async function() {
            console.log("Resend OTP clicked");
            
            resendBtn.disabled = true;
            resendBtn.textContent = 'Sending...';
            
            try {
                // Make actual API call to resend OTP
                const response = await fetch('/user/resend-otp', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    credentials: 'include', // Important for session cookies
                });
                
                const data = await response.json();
                
                if (response.ok && data.success) {
                    showToast(data.message || "New OTP sent successfully!", "success");
                    
                    // Clear all inputs and focus first one
                    inputs.forEach(input => {
                        input.value = '';
                        input.nextElementSibling.classList.add("hidden");
                    });
                    inputs[0].focus();
                    
                    // Restart OTP timer with fresh duration
                    startTimer(60); // 1 minute
                    
                    // Start resend cooldown timer
                    startResendTimer(60); // 60 seconds cooldown
                } else {
                    showToast(data.message || "Failed to send new OTP. Please try again.", "error");
                    resendBtn.disabled = false;
                    resendBtn.textContent = 'Resend OTP';
                }
                
            } catch (error) {
                console.error("Resend error:", error);
                showToast("Network error. Please try again.", "error");
                resendBtn.disabled = false;
                resendBtn.textContent = 'Resend OTP';
            }
        });
        
        // Focus first input on load
        inputs[0].focus();
        
        // Cleanup on page unload
        window.addEventListener('beforeunload', function() {
            if (countdownInterval) {
                clearInterval(countdownInterval);
            }
            if (resendInterval) {
                clearInterval(resendInterval);
            }
        });
    });
    </script>
</body>
</html>