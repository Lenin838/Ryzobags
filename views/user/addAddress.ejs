<%- include("partials/userHeader") %>
<!-- Add Tailwind CSS CDN if not already included in your header -->
<link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">

<div class="container mx-auto px-4 py-8">
  <h3 class="text-2xl font-bold text-teal-700 mb-16">Create User Address</h3>
  
  <div class="bg-white rounded-lg shadow-md p-6 max-w-5xl mx-auto">
    <form id="addressForm" class="space-y-8">
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div>
          <label for="addressType" class="block text-sm font-medium text-gray-700 mb-1">Address Type:</label>
          <input type="text" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-teal-500" id="addressType" name="addressType" required>
        </div>
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Name:</label>
          <input type="text" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-teal-500" id="name" name="name" required>
        </div>
        <div>
          <label for="city" class="block text-sm font-medium text-gray-700 mb-1">City:</label>
          <input type="text" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-teal-500" id="city" name="city" required>
        </div>
      </div>
    
      <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div>
          <label for="landMark" class="block text-sm font-medium text-gray-700 mb-1">Landmark:</label>
          <input type="text" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-teal-500" id="landMark" name="landMark">
        </div>
        <div>
          <label for="state" class="block text-sm font-medium text-gray-700 mb-1">State:</label>
          <input type="text" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-teal-500" id="state" name="state" required>
        </div>
        <div>
          <label for="pincode" class="block text-sm font-medium text-gray-700 mb-1">Pincode:</label>
          <input type="text" maxlength="6" pattern="\d{6}" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-teal-500" id="pincode" name="pincode" required>
        </div>
      </div>
    
      <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label for="phone" class="block text-sm font-medium text-gray-700 mb-1">Phone:</label>
          <input type="text" maxlength="10" pattern="\d{10}" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-teal-500" id="phone" name="phone" required>
        </div>
        <div>
          <label for="altPhone" class="block text-sm font-medium text-gray-700 mb-1">Alternate Phone:</label>
          <input type="text" maxlength="10" pattern="\d{10}" class="w-full px-3 py-2 border-2 border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-teal-500 focus:border-teal-500" id="altPhone" name="altPhone">
        </div>
      </div>
    
      <div class="pt-4">
        <button type="submit" id="submitButton" class="px-6 py-2 bg-teal-600 text-white font-medium rounded-md hover:bg-teal-700 focus:outline-none focus:ring-2 focus:ring-teal-500 focus:ring-offset-2 transition-colors duration-200">
          Submit
        </button>
      </div>
    </form>
    
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
  document.getElementById('addressForm').addEventListener('submit', async function (event) {
    event.preventDefault();

    const submitBtn = document.getElementById('submitButton');
    submitBtn.disabled = true;

    const formData = {
      addressType: document.getElementById('addressType').value.trim(),
      name: document.getElementById('name').value.trim(),
      city: document.getElementById('city').value.trim(),
      landMark: document.getElementById('landMark').value.trim(),
      state: document.getElementById('state').value.trim(),
      pincode: document.getElementById('pincode').value.trim(),
      phone: document.getElementById('phone').value.trim(),
      altPhone: document.getElementById('altPhone').value.trim()
    };

    if (!validateForm(formData)) {
      submitBtn.disabled = false;
      return;
    }

    try {
      const response = await fetch('/user/addAddress', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formData)
      });

      let result = {};
      try {
        result = await response.json();
      } catch (e) {
        result.message = 'Unexpected server response.';
      }

      if (response.ok) {
        Swal.fire({
          icon: 'success',
          title: 'Address added successfully!',
          confirmButtonText: 'OK'
        }).then(() => {
          window.location.href = "/user/checkout"; // Adjust route as needed
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: result.message || 'Something went wrong.'
        });
      }
    } catch (err) {
      Swal.fire({
        icon: 'error',
        title: 'Server Error',
        text: err.message || 'Please try again later.'
      });
    } finally {
      submitBtn.disabled = false;
    }
  });

  function validateForm(data) {
    const requiredFields = ['addressType', 'name', 'city', 'state', 'pincode', 'phone'];
    for (let field of requiredFields) {
      if (!data[field]) {
        Swal.fire({
          icon: 'warning',
          title: 'Validation Error',
          text: `Please fill in the ${field} field.`
        });
        return false;
      }
    }

    if (!/^\d{6}$/.test(data.pincode)) {
      Swal.fire({ icon: 'warning', title: 'Invalid Pincode', text: 'Pincode must be 6 digits.' });
      return false;
    }

    if (!/^\d{10}$/.test(data.phone)) {
      Swal.fire({ icon: 'warning', title: 'Invalid Phone', text: 'Phone must be 10 digits.' });
      return false;
    }

    if (data.altPhone && !/^\d{10}$/.test(data.altPhone)) {
      Swal.fire({ icon: 'warning', title: 'Invalid Alt Phone', text: 'Alternate phone must be 10 digits.' });
      return false;
    }

    return true;
  }
</script>


<%- include("partials/userFooter") %>