<%- include("partials/userHeader") %>
<script src="https://cdn.tailwindcss.com"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<style>
  /* Ensure table headers are not too cramped on mobile */
  @media (max-width: 639px) {
    .products-table th {
      font-size: 0.65rem; /* Smaller font for headers on mobile */
      padding: 0.5rem 0.75rem;
    }
    .products-table td {
      font-size: 0.75rem;
      padding: 0.75rem;
    }
    .products-table img {
      width: 3rem;
      height: 3rem;
    }
  }
  /* Adjust sticky positioning for order summary on mobile */
  @media (max-width: 639px) {
    .order-summary {
      position: static; /* Prevent sticky issues on mobile */
    }
  }
</style>
<div class="container mx-auto px-2 sm:px-4">
  <div class="max-w-full sm:max-w-7xl mx-auto">
    <!-- Products Table Section -->
    <div class="bg-white rounded-lg shadow-md p-4 sm:p-6 mb-4 sm:mb-8">
      <div class="mb-4 sm:mb-6">
        <h2 class="text-lg sm:text-2xl font-semibold text-gray-800">Products</h2>
      </div>
      <div class="overflow-x-auto">
        <table class="w-full min-w-full divide-y divide-gray-200 products-table">
          <thead class="bg-gray-50">
            <tr>
              <th class="px-2 sm:px-6 py-2 sm:py-3 text-left text-xs sm:text-xs font-medium text-gray-500 uppercase tracking-wider">Image</th>
              <th class="px-2 sm:px-6 py-2 sm:py-3 text-left text-xs sm:text-xs font-medium text-gray-500 uppercase tracking-wider">Product</th>
              <th class="px-2 sm:px-6 py-2 sm:py-3 text-left text-xs sm:text-xs font-medium text-gray-500 uppercase tracking-wider">Size</th>
              <th class="px-2 sm:px-6 py-2 sm:py-3 text-left text-xs sm:text-xs font-medium text-gray-500 uppercase tracking-wider">Quantity</th>
              <th class="px-2 sm:px-6 py-2 sm:py-3 text-left text-xs sm:text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
              <th class="px-2 sm:px-6 py-2 sm:py-3 text-left text-xs sm:text-xs font-medium text-gray-500 uppercase tracking-wider">Total</th>
            </tr>
          </thead>
          <tbody class="bg-white divide-y divide-gray-200">
              <% if (cart && cart.items && cart.items.length > 0) { %>
                <% for (let i = 0; i < cart.items.length; i++) { %>
                  <% if (cart.items[i].productId) { %>
                    <% const item = cart.items[i]; %>
                    <% const product = item.productId; %>
                    <% const variant = item.variant; %>
                    <% const price = item.finalPrice || 0; %>
                  <tr class="hover:bg-gray-50 transition-colors">
                    <td class="px-2 sm:px-6 py-2 sm:py-4 whitespace-nowrap">
                      <img class="h-12 w-12 sm:h-16 sm:w-16 object-cover rounded" src="<%= product.mainImage && product.mainImage.length > 0 ? product.mainImage : '/img/placeholder.jpg' %>" alt="<%= product.name %>" />
                    </td>
                    <td class="px-2 sm:px-6 py-2 sm:py-4 whitespace-nowrap">
                      <h5 class="text-xs sm:text-sm font-medium text-gray-900"><%= product.name %></h5>
                    </td>
                    <td class="px-2 sm:px-6 py-2 sm:py-4 whitespace-nowrap text-xs sm:text-sm text-gray-500">
                      <%= item.size %>
                    </td>
                    <td class="px-2 sm:px-6 py-2 sm:py-4 whitespace-nowrap text-xs sm:text-sm text-gray-500">
                      <%= item.quantity %>
                    </td>
                    <td class="px-2 sm:px-6 py-2 sm:py-4 whitespace-nowrap text-xs sm:text-sm text-gray-500">
                      ₹<%= price %>
                    </td>
                    <td class="px-2 sm:px-6 py-2 sm:py-4 whitespace-nowrap text-xs sm:text-sm font-medium text-gray-900">
                      ₹<%= price * item.quantity %>
                    </td>
                  </tr>
                  <% } else { %>
                    <tr>
                      <td colspan="6" class="px-2 sm:px-6 py-2 sm:py-4 text-center text-xs sm:text-sm text-gray-500">Invalid product data</td>
                    </tr>
                  <% } %>
                <% } %>
              <% } else { %>
                <tr>
                  <td colspan="6" class="px-2 sm:px-6 py-2 sm:py-4 text-center text-xs sm:text-sm text-gray-500">No products found</td>
                </tr>
              <% } %>
            </tbody>
        </table>
      </div>
    </div>

    <div class="grid grid-cols-1 sm:grid-cols-12 gap-4 sm:gap-8">
      <!-- Address Section -->
      <div class="sm:col-span-8">
        <div class="bg-white rounded-lg shadow-md p-4 sm:p-6 mb-4 sm:mb-6">
          <h2 class="text-lg sm:text-2xl font-semibold text-gray-800 mb-4 sm:mb-6">Shipping Address</h2>
          <div class="grid grid-cols-1 sm:grid-cols-2 gap-3 sm:gap-4">
            <% if (userAddress && userAddress.length > 0) { %>
              <% userAddress.forEach((address) => { %>
                <div class="border border-gray-200 rounded-lg p-3 sm:p-4 hover:border-blue-300 hover:shadow-md transition-all duration-200">
                  <div class="flex items-center mb-2 sm:mb-3">
                    <input class="form-radio h-4 w-4 text-blue-600 focus:ring-blue-500" type="radio"
                      id="addressRadio<%= address._id %>" name="selectedAddress"
                      value="<%= address._id %>" <%= address.isDefault ? 'checked' : '' %> >
                    <label class="ml-2 text-xs sm:text-sm font-medium text-gray-700"
                      for="addressRadio<%= address._id %>">
                      <span class="inline-flex items-center px-2 sm:px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                        <%= address.addressType %>
                      </span>
                    </label>
                  </div>
                  <div class="text-xs sm:text-sm text-gray-600 space-y-1">
                    <p class="font-medium text-gray-800"><%= address.name %></p>
                    <p><%= address.city %>, <%= address.landMark %></p>
                    <p><%= address.state %>, <%= address.pincode %></p>
                    <p>Phone: <%= address.phone %></p>
                    <p>Alt Phone: <%= address.altPhone %></p>
                  </div>
                  <div class="flex justify-between mt-3 sm:mt-4">
                    <a href="/user/profile/address/edit/<%= address._id %>"
                      class="text-xs sm:text-sm font-medium text-blue-600 hover:text-blue-800 hover:underline">Edit</a>
                    <a href="/user/profile/address/delete/<%= address._id %>"
                      class="text-xs sm:text-sm font-medium text-red-600 hover:text-red-800 hover:underline"
                      onclick="return confirm('Are you sure you want to delete this address?')">Delete</a>
                  </div>
                </div>
              <% }) %>
              <% } else { %>
                <div class="col-span-2 border border-gray-200 rounded-lg p-3 sm:p-4 text-center text-xs sm:text-sm text-gray-500">
                  No address found
                </div>
              <% } %>
            <div class="col-span-2 mt-3 sm:mt-4">
              <a href="/user/profile/address/add">
                <button class="w-full py-2 px-3 sm:px-4 border border-transparent rounded-md shadow-sm text-xs sm:text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors">
                  Add New Address
                </button>
              </a>
            </div>
          </div>
        </div>

        <!-- Payment Method Section -->
        <div class="bg-white rounded-lg shadow-md p-4 sm:p-6">
          <h2 class="text-lg sm:text-2xl font-semibold text-gray-800 mb-4 sm:mb-6">Payment Method</h2>
          <div class="space-y-3 sm:space-y-4">
            <div class="flex items-center p-2 sm:p-3 rounded-md hover:bg-gray-50 transition-colors">
              <input class="form-radio h-4 sm:h-5 w-4 sm:w-5 text-blue-600 focus:ring-blue-500" type="radio" value="cod" name="payment_option" id="CashOnDelivery" checked>
              <label class="ml-2 sm:ml-3 block text-xs sm:text-sm font-medium text-gray-700" for="CashOnDelivery">
                Cash on Delivery
              </label>
            </div>
            <div class="flex items-center p-2 sm:p-3 rounded-md hover:bg-gray-50 transition-colors">
              <input class="form-radio h-4 sm:h-5 w-4 sm:w-5 text-blue-600 focus:ring-blue-500" type="radio" value="razorpay" name="payment_option" id="Razorpay">
              <label class="ml-2 sm:ml-3 block text-xs sm:text-sm font-medium text-gray-700" for="Razorpay">
                Razorpay
              </label>
            </div>
            <div class="flex items-center p-2 sm:p-3 rounded-md hover:bg-gray-50 transition-colors">
              <input class="form-radio h-4 sm:h-5 w-4 sm:w-5 text-blue-600 focus:ring-blue-500" type="radio" value="wallet" name="payment_option" id="wallet">
              <label class="ml-2 sm:ml-3 block text-xs sm:text-sm font-medium text-gray-700" for="wallet">
                Wallet
              </label>
            </div>
          </div>
        </div>
      </div>

      <!-- Order Summary Section -->
      <div class="sm:col-span-4">
        <div class="bg-white rounded-lg shadow-md p-4 sm:p-6 order-summary sticky top-4 sm:top-6">
          <h2 class="text-lg sm:text-2xl font-semibold text-gray-800 mb-4 sm:mb-6">Order Summary</h2>
          
          <!-- Coupon Input -->
          <div class="mb-4 sm:mb-6">
            <div class="flex">
              <input type="text" id="inputCoupon" placeholder="Enter coupon code" 
                class="flex-grow px-3 sm:px-4 py-1.5 sm:py-2 border border-gray-300 rounded-l-md focus:ring-blue-500 focus:border-blue-500 text-xs sm:text-sm" />
              <button id="applyButton" type="button" onclick="applyCoupon('<%=grandTotal%>')"
                class="px-3 sm:px-4 py-1.5 sm:py-2 bg-blue-600 text-white rounded-r-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors text-xs sm:text-sm">
                Apply
              </button>
            </div>
          </div>
          
          <!-- Available Coupons -->
          <div class="mb-4 sm:mb-6">
            <h3 class="text-xs sm:text-sm font-medium text-gray-700 mb-2 sm:mb-3">Available Coupons</h3>
            <div class="space-y-2 sm:space-y-3 max-h-48 overflow-y-auto pr-1">
              <% if (locals.coupon) { %>
                <% for (let i=0; i < coupon.length; i++) { %>
                  <div class="border border-gray-200 rounded-lg p-2 sm:p-3 flex justify-between items-center hover:border-blue-300 transition-colors">
                    <div>
                      <span class="text-xs font-semibold text-gray-800"><%= coupon[i].code %></span>
                    </div>
                    <div class="flex space-x-1 sm:space-x-2">
                      <button onclick="useCoupon('<%= coupon[i].code %>')" id="useButton_<%= coupon[i].code %>" 
                        class="px-2 sm:px-3 py-1 bg-green-600 text-white text-xs rounded hover:bg-green-700 transition-colors use-button">
                        Use
                      </button>
                      <button onclick="cancelCoupon('<%= coupon[i].code %>')" id="cancelButton_<%= coupon[i].code %>" 
                        class="px-2 sm:px-3 py-1 bg-red-600 text-white text-xs rounded hover:bg-red-700 transition-colors"
                        style="display: none;">
                        Cancel
                      </button>
                    </div>
                  </div>
                <% } %>
              <% } else { %>
                <p class="text-xs sm:text-sm text-gray-500">No coupons available</p>
              <% } %>
            </div>
          </div>
          
          <!-- Order Details -->
          <% 
          let cartTotal = 0;
          if (cart && cart.items && cart.items.length > 0) {
            for (let i = 0; i < cart.items.length; i++) {
              if (cart.items[i].productId) {
                const product = cart.items[i].productId;
                const variant = product.variants.find(v => v.size === cart.items[i].size);
                const price = variant ? variant.regularPrice : 0;
                cartTotal += price * cart.items[i].quantity;
              }
            }
          }
          %>
          
          <div class="border-t border-gray-200 pt-3 sm:pt-4 space-y-2 sm:space-y-3">
            <div class="flex justify-between text-xs sm:text-sm">
              <span class="text-gray-600">Subtotal</span>
              <span class="text-gray-800 font-medium">₹<%= subtotal %></span>
            </div>
            <div class="flex justify-between text-xs sm:text-sm">
              <span class="text-gray-600">Coupon</span>
              <span class="text-gray-800 font-medium" id="couponDiscount">₹-<%= couponDiscount %></span>
            </div>
            <div class="flex justify-between text-xs sm:text-sm">
              <span class="text-gray-600">Discount</span>
              <span class="text-gray-800 font-medium" id="productDiscount">₹<%= productDiscount %></span>
            </div>
            <div class="flex justify-between text-sm sm:text-base font-medium pt-2 border-t border-gray-200">
              <span class="text-gray-900">Total</span>
              <span class="text-blue-600 text-base sm:text-xl" id="totalValue">
                ₹<%= typeof grandTotal !== 'undefined' ? grandTotal : finalPrice*item.quantity %>
              </span>
            </div>
          </div>
          
          <div class="mt-4 sm:mt-6">  
            <input type="hidden" id="grandTotalInput" value="<%= grandTotal %>">       
            <button type="button" onclick="placeOrder('<%= user._id %>')" id="placeOrderButton"
              class="w-full py-2 sm:py-3 px-3 sm:px-4 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-colors text-xs sm:text-sm">
              Place Order
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

<script>
let appliedCoupon = null;
let couponDiscount = '<%= couponDiscount || 0 %>';
let originalTotal = '<%= subtotal %>'; // Already includes product/category discounts

function useCoupon(code) {
  document.getElementById("inputCoupon").value = code;
  applyCoupon(originalTotal);
}

async function applyCoupon(totalAmount) {
  const couponName = document.getElementById("inputCoupon").value.trim();
  if (!couponName) {
    await Swal.fire({ 
      icon: 'error', 
      title: 'Error', 
      text: 'Please enter a coupon code.' 
    });
    return;
  }

  try {
    // Reset any previously applied coupon buttons first
    if (appliedCoupon) {
      const prevUseButton = document.getElementById(`useButton_${appliedCoupon}`);
      const prevCancelButton = document.getElementById(`cancelButton_${appliedCoupon}`);
      
      if (prevUseButton) prevUseButton.style.display = 'inline-block';
      if (prevCancelButton) prevCancelButton.style.display = 'none';
    }

    const response = await fetch('/user/applyCoupon', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ coupon: couponName, total: totalAmount }),
    });

    const data = await response.json();

    if (data.success) {
      appliedCoupon = couponName;
      couponDiscount = data.discount;

      document.getElementById("totalValue").innerText = `₹${data.grandTotal.toFixed(2)}`;
      document.getElementById("couponDiscount").innerText = `₹${data.discount.toFixed(2)}`;
      document.getElementById("inputCoupon").value = "";

      if (document.getElementById(`useButton_${couponName}`))
        document.getElementById(`useButton_${couponName}`).style.display = 'none';

      if (document.getElementById(`cancelButton_${couponName}`))
        document.getElementById(`cancelButton_${couponName}`).style.display = 'inline-block';

      await Swal.fire({ 
        icon: 'success', 
        title: 'Success', 
        text: `Coupon applied successfully! You saved ₹${data.discount.toFixed(2)}`
      });
    } else {
      await Swal.fire({ 
        icon: 'error', 
        title: 'Error', 
        text: data.message || 'Failed to apply coupon.' 
      });
    }
  } catch (error) {
    console.error('Error applying coupon:', error);
    await Swal.fire({ 
      icon: 'error', 
      title: 'Error', 
      text: 'Failed to apply coupon. Please try again.' 
    });
  }
}

async function cancelCoupon(couponCode) {
  if (appliedCoupon !== couponCode) {
    await Swal.fire({
      icon: 'warning',
      title: 'No Coupon Applied',
      text: 'No coupon is currently applied to cancel.',
    });
    return;
  }

  try {
    appliedCoupon = null;
    couponDiscount = 0;

    document.getElementById("totalValue").innerText = `₹${originalTotal}`;
    document.getElementById("couponDiscount").innerText = `₹0`;

    document.getElementById(`useButton_${couponCode}`).style.display = 'inline-block';
    document.getElementById(`cancelButton_${couponCode}`).style.display = 'none';

    await Swal.fire({
      icon: 'success',
      title: 'Success',
      text: 'Coupon removed successfully!',
    });
  } catch (error) {
    console.error('Error cancelling coupon:', error);
    await Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'Failed to remove coupon. Please try again.',
    });
  }
}

let paymentInProgress = false;

async function handleRazorpayPayment(response, amount) {
  if (paymentInProgress) {
    console.log("Payment already in progress, ignoring duplicate call");
    return;
  }

  try {
    paymentInProgress = true;

    if (!response.success || !response.order_id || !response.key_id) {
      console.error("Invalid Razorpay response:", response);
      throw new Error("Invalid Razorpay order data");
    }

    console.log("Initializing Razorpay payment:", {
      orderId: response.order_id,
      amount: amount,
      keyId: response.key_id
    });

    const options = {
      key: response.key_id,
      amount: Math.round(amount * 100), // Convert to paise
      currency: "INR",
      name: "RYZO BAGS",
      description: "Order Payment",
      order_id: response.order_id,
      timeout: 300000, // 5 minutes timeout
      handler: async function (razorpayResponse) {
        console.log("Razorpay payment successful:", razorpayResponse);
        await handlePaymentSuccess(razorpayResponse, response.mongoOrderId);
      },
      prefill: {
        name: "<%= user.name %>",
        email: "<%= user.email %>",
        contact: "<%= user.phone %>"
      },
      theme: {
        color: "#3399cc"
      },
      modal: {
        ondismiss: function () {
          console.log('Razorpay modal dismissed by user');
          paymentInProgress = false;
          resetOrderButton();

          Swal.fire({
            title: 'Payment Cancelled',
            text: 'You cancelled the payment process.',
            icon: 'info',
            confirmButtonText: 'OK'
          }).then(() => {
            window.location.href = `/user/orderFailure?orderId=${response.mongoOrderId}&error=Payment cancelled by user`;
          });
        }
      }
    };

    const rzp1 = new Razorpay(options);
    
    rzp1.on('payment.failed', function (responseError) {
      console.error('Razorpay payment failed:', responseError.error);
      paymentInProgress = false;
      handlePaymentFailure(responseError.error, response.mongoOrderId);
    });
    
    rzp1.open();
    
  } catch (error) {
    console.error('Razorpay initialization error:', error);
    paymentInProgress = false;
    resetOrderButton();
    throw error;
  }
}

async function handlePaymentSuccess(razorpayResponse, mongoOrderId) {
  try {
    console.log("Processing payment success:", razorpayResponse);
    
    Swal.fire({
      title: 'Verifying Payment',
      html: 'Please wait while we verify your payment...<br><small>Do not close this window</small>',
      allowOutsideClick: false,
      allowEscapeKey: false,
      showConfirmButton: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });
    
    const verificationResult = await verifyPaymentWithRetry(razorpayResponse, 3);
    
    if (verificationResult.success) {
      Swal.close();
      
      await Swal.fire({
        title: 'Payment Successful!',
        text: 'Your order has been placed successfully!',
        icon: 'success',
        timer: 2000,
        showConfirmButton: false
      });
      
      window.location.href = `/user/orderSuccess?orderId=${verificationResult.order._id}`;
    } else {
      throw new Error(verificationResult.message || 'Payment verification failed');
    }
    
  } catch (error) {
    console.error('Payment success handling error:', error);
    paymentInProgress = false;
    Swal.close();
    
    await Swal.fire({
      title: 'Payment Verification Failed',
      html: `
        <p>${error.message || 'Unable to verify payment.'}</p>
        <small>If your payment was successful, please contact support with your payment ID: <strong>${razorpayResponse.razorpay_payment_id}</strong></small>
      `,
      icon: 'error',
      confirmButtonText: 'OK'
    });
    
    window.location.href = `/user/orderFailure?orderId=${mongoOrderId}&error=${encodeURIComponent(error.message || 'Payment verification failed')}`;
  }
}

async function handlePaymentFailure(error, mongoOrderId) {
  console.error('Payment failed:', error);
  paymentInProgress = false;
  resetOrderButton();
  
  await Swal.fire({
    title: 'Payment Failed',
    text: error.description || 'Payment failed. Please try again.',
    icon: 'error',
    confirmButtonText: 'OK'
  });
  
  window.location.href = `/user/orderFailure?orderId=${mongoOrderId}&error=${encodeURIComponent(error.description || "Payment failed")}`;
}

async function verifyPaymentWithRetry(razorpayResponse, maxRetries = 3) {
  let lastError;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`Payment verification attempt ${attempt}/${maxRetries}`);
      
      const response = await fetch('/user/verify-payment', {
        method: 'POST',
        headers: { 
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify({
          razorpay_payment_id: razorpayResponse.razorpay_payment_id,
          razorpay_order_id: razorpayResponse.razorpay_order_id,
          razorpay_signature: razorpayResponse.razorpay_signature
        }),
        timeout: 30000
      });

      console.log(`Verification attempt ${attempt} - Status:`, response.status);

      if (response.ok) {
        const data = await response.json();
        console.log(`Verification attempt ${attempt} - Response:`, data);
        
        if (data.success) {
          return data;
        } else {
          lastError = new Error(data.message || 'Verification failed');
        }
      } else {
        const errorText = await response.text();
        lastError = new Error(`HTTP ${response.status}: ${errorText}`);
      }
      
    } catch (error) {
      console.error(`Verification attempt ${attempt} failed:`, error);
      lastError = error;
    }
    
    if (attempt < maxRetries) {
      const delay = Math.pow(2, attempt) * 1000;
      console.log(`Waiting ${delay}ms before retry...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
  
  throw lastError || new Error('Payment verification failed after all retries');
}

async function placeOrder(userId) {
  if (paymentInProgress) {
    console.log("Payment already in progress");
    return;
  }

  try {
    const orderButton = document.getElementById('placeOrderButton');
    orderButton.disabled = true;
    orderButton.innerHTML = 'Processing...';

    const address = document.querySelector("input[name='selectedAddress']:checked")?.value;
    const payment = document.querySelector("input[name='payment_option']:checked")?.value;
    const numericValue = parseFloat(document.getElementById('grandTotalInput').value);

    const discountElement = document.getElementById("discount");
    const discount = discountElement ? Math.round(parseFloat(discountElement.textContent.replace(/[^\d.]/g, '')) * 100) / 100 : 0;
    const totalElement = document.getElementById("totalValue");
    
    if (!totalElement) {
      throw new Error("Total value element not found");
    }

    const sum = totalElement.textContent;

    if (!payment) {
      await Swal.fire({
        title: 'Payment Required',
        text: 'Please select a payment method.',
        icon: 'error',
        timer: 3000,
      });
      resetOrderButton();
      return;
    }

    if (!address) {
      await Swal.fire({
        title: 'Address Required',
        text: 'Please select a shipping address.',
        icon: 'error',
        timer: 3000,
      });
      resetOrderButton();
      return;
    }

    if (payment === "cod" && numericValue > 1000) {
      await Swal.fire({
        title: 'COD Not Allowed',
        text: 'Orders above ₹1000 are not allowed for Cash on Delivery.',
        icon: 'error',
        timer: 3000,
      });
      resetOrderButton();
      return;
    }

    if (appliedCoupon && couponDiscount===0) {
      await Swal.fire({
        icon: 'warning',
        title: 'Invalid Coupon',
        text: 'The applied coupon is invalid or expired. Please remove it or try again.',
      });
      resetOrderButton();
      return;
    }

    Swal.fire({
      title: 'Processing Order',
      html: 'Please wait while we process your order...',
      allowOutsideClick: false,
      allowEscapeKey: false,
      showConfirmButton: false,
      didOpen: () => {
        Swal.showLoading();
      }
    });

    const orderData = {
      totalPrice: numericValue,
      createdOn: new Date().getTime(),
      date: new Date(),
      addressId: address,
      payment: payment,
      discount: discount,
      coupon: appliedCoupon
    };

    console.log("Sending order data:", orderData);

    const response = await fetch('/user/orderPlaced', {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify(orderData)
    });

    console.log("Order response status:", response.status);

    if (!response.ok) {
      const errorText = await response.text();
      console.error("Order placement failed:", response.status, errorText);
      throw new Error(`Failed to place order: ${errorText}`);
    }

    const data = await response.json();
    console.log("Order placement response:", data);

    if (!data.success) {
      throw new Error(data.message || "Order placement failed");
    }

    Swal.close();

    if (payment === "cod" || payment === "wallet") {
      await handleDirectPayment(data);
    } else if (payment === "razorpay") {
      await handleRazorpayPayment(data, numericValue);
    } else if (payment === "paypal") {
      await handlePaypalPayment(data, numericValue);
    } else {
      throw new Error("Unknown payment method: " + payment);
    }

  } catch (error) {
    console.error("Order placement error:", error);
    paymentInProgress = false;
    Swal.close();
    
    await Swal.fire({
      title: 'Order Failed',
      text: error.message || "Couldn't process your order. Please try again.",
      icon: 'error',
      confirmButtonText: 'OK'
    });
    resetOrderButton();
  }
}

function resetOrderButton() {
  const orderButton = document.getElementById('placeOrderButton');
  if (orderButton) {
    orderButton.disabled = false;
    orderButton.innerHTML = 'Place Order';
  }
  paymentInProgress = false;
}

async function handleDirectPayment(response) {
  try {
    if (response.success && response.order && response.order._id) {
      await Swal.fire({
        title: 'Order Placed Successfully',
        text: response.message || 'Your order has been placed successfully!',
        icon: 'success',
        timer: 3000,
        showConfirmButton: false
      });
      window.location.href = `/user/orderSuccess?orderId=${response.order._id}`;
    } else {
      throw new Error(response.message || "Failed to place order");
    }
  } catch (error) {
    console.error("Direct payment error:", error);
    throw error;
  }
}

document.addEventListener('visibilitychange', function() {
  if (document.hidden && paymentInProgress) {
    console.log('Page became hidden during payment process');
  } else if (!document.hidden && paymentInProgress) {
    console.log('Page became visible during payment process');
  }
});
</script>

<%- include("partials/userFooter") %>