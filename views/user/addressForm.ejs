<%- include("partials/uHeader") %>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= address._id ? 'Edit Address' : 'Add Address' %></title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="/css/styles.css">
  <style>
    /* Smooth sidebar transition */
    #sidebar {
      transition: transform 0.3s ease-in-out;
    }
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    body {
      font-family: 'Inter', sans-serif;
    }
    @media (max-width: 639px) {
      #sidebar.hidden {
        transform: translateX(-100%);
      }
      .main-content {
        min-height: calc(100vh - 4rem); /* Adjust for header height on mobile */
      }
    }
  </style>
</head>
<body class="bg-slate-50 min-h-screen flex flex-col sm:flex-row">
  <%- include("partials/userSidebar", { activeTab: 'addresses' }) %>
  <div class="flex-1 ml-0 sm:ml-64 pt-16 main-content">
    <div class="w-full max-w-full sm:max-w-lg mx-auto px-4 sm:px-6 lg:px-8 py-6 sm:py-8">
      <% if (success && success.length) { %>
        <div class="bg-teal-50 border-l-4 border-teal-500 text-teal-700 p-4 sm:p-6 mb-6 sm:mb-8" role="alert">
          <p class="text-sm sm:text-base"><%= success %></p>
        </div>
      <% } %>
      <% if (error && error.length) { %>
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 sm:p-6 mb-6 sm:mb-8" role="alert">
          <p class="text-sm sm:text-base"><%= error %></p>
        </div>
      <% } %>
      <div class="bg-white rounded-xl shadow-md border border-slate-200 p-6 sm:p-8">
        <h5 class="text-xl sm:text-2xl font-semibold text-teal-700 mb-6 sm:mb-8"><%= address._id ? 'Edit Address' : 'Add Address' %></h5>
        <form id="addressForm" 
          data-action="<%= address._id ? `/user/profile/address/edit/${address._id}` : '/user/profile/address/add' %>" 
          class="space-y-6 sm:space-y-8">
          <div>
            <label for="name" class="block text-sm sm:text-base font-medium text-slate-700">Name *</label>
            <input type="text" id="name" name="name" value="<%= address.name || '' %>" 
                   class="mt-1 block w-full px-4 py-3 border border-slate-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 text-sm sm:text-base">
            <p class="text-red-500 text-sm mt-2 hidden" id="nameError">Name is required (3-50 characters)</p>
          </div>
          <div>
            <label for="landMark" class="block text-sm sm:text-base font-medium text-slate-700">Landmark</label>
            <input type="text" id="landMark" name="landMark" value="<%= address.landMark || '' %>" 
                   class="mt-1 block w-full px-4 py-3 border border-slate-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 text-sm sm:text-base">
          </div>
          <div>
            <label for="city" class="block text-sm sm:text-base font-medium text-slate-700">City *</label>
            <input type="text" id="city" name="city" value="<%= address.city || '' %>" 
                   class="mt-1 block w-full px-4 py-3 border border-slate-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 text-sm sm:text-base">
            <p class="text-red-500 text-sm mt-2 hidden" id="cityError">City is required (2-50 characters)</p>
          </div>
          <div>
            <label for="state" class="block text-sm sm:text-base font-medium text-slate-700">State *</label>
            <input type="text" id="state" name="state" value="<%= address.state || '' %>" 
                   class="mt-1 block w-full px-4 py-3 border border-slate-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 text-sm sm:text-base">
            <p class="text-red-500 text-sm mt-2 hidden" id="stateError">State is required (2-50 characters)</p>
          </div>
          <div>
            <label for="pincode" class="block text-sm sm:text-base font-medium text-slate-700">Pincode *</label>
            <input type="text" id="pincode" name="pincode" value="<%= address.pincode || '' %>" 
                   class="mt-1 block w-full px-4 py-3 border border-slate-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 text-sm sm:text-base">
            <p class="text-red-500 text-sm mt-2 hidden" id="pincodeError">Pincode must be 6 digits</p>
          </div>
          <div>
            <label for="phone" class="block text-sm sm:text-base font-medium text-slate-700">Phone *</label>
            <input type="tel" id="phone" name="phone" value="<%= address.phone || '' %>" 
                   class="mt-1 block w-full px-4 py-3 border border-slate-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 text-sm sm:text-base">
            <p class="text-red-500 text-sm mt-2 hidden" id="phoneError">Phone must be 10 digits</p>
          </div>
          <div>
            <label for="addressType" class="block text-sm sm:text-base font-medium text-slate-700">Address Type</label>
            <select id="addressType" name="addressType" 
                    class="mt-1 block w-full px-4 py-3 border border-slate-300 rounded-md shadow-sm focus:ring-teal-500 focus:border-teal-500 text-sm sm:text-base">
              <option value="Home" <%= address.addressType === 'Home' ? 'selected' : '' %>>Home</option>
              <option value="Work" <%= address.addressType === 'Work' ? 'selected' : '' %>>Work</option>
              <option value="Other" <%= address.addressType === 'Other' ? 'selected' : '' %>>Other</option>
            </select>
          </div>
          <div>
            <label class="flex items-center">
              <input type="checkbox" id="isDefault" name="isDefault" <%= address.isDefault ? 'checked' : '' %>
                     class="rounded border-slate-300 text-teal-600 shadow-sm focus:border-teal-300 focus:ring focus:ring-teal-200 focus:ring-opacity-50">
              <span class="ml-3 text-sm sm:text-base text-slate-700">Set as default address</span>
            </label>
          </div>
          <div class="flex justify-end space-x-4 sm:space-x-6">
            <a href="/user/profile?tab=addresses" class="text-slate-600 hover:text-slate-800 text-sm sm:text-base">Cancel</a>
            <button type="submit" class="bg-teal-600 text-white px-4 sm:px-6 py-2.5 sm:py-3 rounded-lg hover:bg-teal-700 text-sm sm:text-base">Save Address</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const mobileMenuToggle = document.getElementById("mobile-menu-toggle");
      const mobileMenu = document.getElementById("mobile-menu");
      const closeMobileMenu = document.getElementById("close-mobile-menu");
      const toggleSidebar = document.getElementById("toggle-sidebar");
      const sidebar = document.getElementById("sidebar");
      const addressForm = document.getElementById("addressForm");

      // Mobile menu handlers
      if (mobileMenuToggle) {
        mobileMenuToggle.addEventListener("click", () => {
          mobileMenu.classList.toggle("hidden");
        });
      }

      if (closeMobileMenu) {
        closeMobileMenu.addEventListener("click", () => {
          mobileMenu.classList.add("hidden");
        });
      }

      if (toggleSidebar) {
        toggleSidebar.addEventListener("click", () => {
          sidebar.classList.toggle("hidden");
          if (mobileMenu) mobileMenu.classList.add("hidden");
        });
      }

      window.addEventListener("click", (e) => {
        if (e.target === mobileMenu) {
          mobileMenu.classList.add("hidden");
        }
      });

      // Form validation and submission
      addressForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        let isValid = true;

        // Reset error messages
        document.querySelectorAll('.text-red-500').forEach(error => error.classList.add('hidden'));

        // Name validation
        const name = document.getElementById("name").value.trim();
        if (!name || name.length < 3 || name.length > 50) {
          document.getElementById("nameError").classList.remove('hidden');
          isValid = false;
        }

        // City validation
        const city = document.getElementById("city").value.trim();
        if (!city || city.length < 2 || city.length > 50) {
          document.getElementById("cityError").classList.remove('hidden');
          isValid = false;
        }

        // State validation
        const state = document.getElementById("state").value.trim();
        if (!state || state.length < 2 || state.length > 50) {
          document.getElementById("stateError").classList.remove('hidden');
          isValid = false;
        }

        // Pincode validation
        const pincode = document.getElementById("pincode").value.trim();
        if (!/^\d{6}$/.test(pincode)) {
          document.getElementById("pincodeError").classList.remove('hidden');
          isValid = false;
        }

        // Phone validation
        const phone = document.getElementById("phone").value.trim();
        if (!/^\d{10}$/.test(phone)) {
          document.getElementById("phoneError").classList.remove('hidden');
          isValid = false;
        }

        if (isValid) {
          try {
            // Show loading state
            const submitButton = document.querySelector('button[type="submit"]');
            const originalText = submitButton.textContent;
            submitButton.textContent = 'Saving...';
            submitButton.disabled = true;

            // Prepare form data
            const formData = new FormData(addressForm);
            const data = {};
            
            // Convert FormData to object
            formData.forEach((value, key) => {
              data[key] = value;
            });

            // Handle checkbox for isDefault
            data.isDefault = document.getElementById("isDefault").checked;

            const url = addressForm.getAttribute("data-action");
            const method = url.includes("/edit/") ? "PUT" : "POST";

            console.log('Sending data:', data); // Debug log
            console.log('URL:', url, 'Method:', method); // Debug log

            const response = await fetch(url, {
              method,
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify(data),
            });

            const result = await response.json();
            console.log('Server response:', result); // Debug log

            if (result.success) {
              Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'success',
                title: result.message || 'Address saved successfully!',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
                didOpen: (toast) => {
                  toast.addEventListener('mouseenter', Swal.stopTimer);
                  toast.addEventListener('mouseleave', Swal.resumeTimer);
                }
              });

              setTimeout(() => {
                window.location.href = "/user/profile?tab=addresses";
              }, 1000);
            } else {
              // Show error toast
              Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'error',
                title: result.message || 'Failed to save address',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true
              });
            }

            // Reset button state
            submitButton.textContent = originalText;
            submitButton.disabled = false;

          } catch (err) {
            console.error("Request error:", err);
            
            // Reset button state
            const submitButton = document.querySelector('button[type="submit"]');
            submitButton.textContent = 'Save Address';
            submitButton.disabled = false;
            
            // Show network error toast
            Swal.fire({
              toast: true,
              position: 'top-end',
              icon: 'error',
              title: 'Network error occurred',
              showConfirmButton: false,
              timer: 3000,
              timerProgressBar: true
            });
          }
        }
      });
    });
  </script>
</body>
</html>