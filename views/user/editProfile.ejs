<%- include("partials/uHeader") %>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Edit Profile</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="/css/styles.css">
  <style>
    @media (max-width: 639px) {
      #sidebar.hidden {
        transform: translateX(-100%);
      }
      .main-content {
        min-height: calc(100vh - 4rem); /* Adjust for header height on mobile */
      }
    }
    #toast-success {
      max-width: 90%; /* Prevent overflow on mobile */
    }
    @media (min-width: 640px) {
      #toast-success {
        max-width: 20rem; /* Fixed width for larger screens */
      }
    }
  </style>
</head>
<body class="bg-gray-50 min-h-screen flex flex-col sm:flex-row">
  <%- include("partials/userSidebar", { activeTab: 'edit' }) %>
  <div class="flex-1 ml-0 sm:ml-64 pt-16 main-content">
    <div class="max-w-full sm:max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-6">
      <!-- Success/Error Messages -->
      <% if (success && success.length) { %>
        <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-3 sm:p-4 mb-3 sm:mb-4" role="alert">
          <p class="text-xs sm:text-sm"><%= success %></p>
        </div>
      <% } %>
      <% if (error && error.length) { %>
        <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-3 sm:p-4 mb-3 sm:mb-4" role="alert">
          <p class="text-xs sm:text-sm"><%= error %></p>
        </div>
      <% } %>

      <!-- Toast Notification -->
      <div id="toast-success" class="hidden fixed top-2 sm:top-4 right-2 sm:right-4 bg-green-500 text-white p-3 sm:p-4 rounded-md shadow-lg flex items-center z-50">
        <svg class="w-4 sm:w-5 h-4 sm:h-5 mr-1 sm:mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
        </svg>
        <span id="toast-message" class="text-xs sm:text-sm"></span>
        <button id="toast-close" class="ml-2 sm:ml-4 text-white hover:text-gray-200 focus:outline-none text-sm">Ã—</button>
      </div>

      <div class="bg-white rounded-lg shadow-lg p-4 sm:p-6">
        <h5 class="text-base sm:text-lg font-semibold mb-3 sm:mb-4">Edit Profile</h5>
        
        <!-- Profile Form -->
        <form id="editProfileForm">
          <div class="mb-3 sm:mb-4">
            <label for="fullname" class="block text-xs sm:text-sm font-medium text-gray-700">Full Name</label>
            <input type="text" name="fullname" id="fullname" value="<%= user.fullname %>" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-1.5 sm:py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-xs sm:text-sm" required>
          </div>
          <div class="mb-3 sm:mb-4">
            <label for="phoneNumber" class="block text-xs sm:text-sm font-medium text-gray-700">Phone Number</label>
            <input type="tel" name="phoneNumber" id="phoneNumber" value="<%= user.phoneNumber || '' %>" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-1.5 sm:py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-xs sm:text-sm">
          </div>
          <div class="mb-3 sm:mb-4">
            <label for="profileImage" class="block text-xs sm:text-sm font-medium text-gray-700">Profile Image</label>
            <input type="file" name="profileImage" id="profileImage" accept="image/*" class="mt-1 block w-full text-xs sm:text-sm text-gray-500 file:mr-3 sm:mr-4 file:py-1.5 sm:file:py-2 file:px-3 sm:file:px-4 file:rounded-md file:border-0 file:text-xs sm:file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100">
          </div>
          <div class="flex justify-end">
            <button type="submit" class="inline-flex items-center px-3 sm:px-4 py-1.5 sm:py-2 border border-transparent rounded-md shadow-sm text-xs sm:text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">Save Changes</button>
          </div>
        </form>

        <!-- Change Email Section -->
        <div class="mt-4 sm:mt-6">
          <h5 class="text-base sm:text-lg font-semibold mb-3 sm:mb-4">Change Email</h5>
          <div class="mb-3 sm:mb-4">
            <label class="block text-xs sm:text-sm font-medium text-gray-700 mb-1 sm:mb-2">Current Email</label>
            <p class="text-xs sm:text-sm text-gray-600 bg-gray-50 p-1.5 sm:p-2 rounded"><%= user.email %></p>
          </div>
          
          <form id="change-email-form">
            <div class="mb-3 sm:mb-4">
              <label for="newEmail" class="block text-xs sm:text-sm font-medium text-gray-700">New Email</label>
              <input type="email" name="newEmail" id="newEmail" value="<%= newEmail || '' %>" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-1.5 sm:py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-xs sm:text-sm" required>
            </div>
            <div class="flex justify-end">
              <button type="submit" id="send-otp-btn" class="inline-flex items-center px-3 sm:px-4 py-1.5 sm:py-2 border border-transparent rounded-md shadow-sm text-xs sm:text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                <span class="btn-text">Send Verification Email</span>
                <div class="hidden loading-spinner ml-1 sm:ml-2">
                  <div class="animate-spin rounded-full h-3 sm:h-4 w-3 sm:w-4 border-b-2 border-white"></div>
                </div>
              </button>
            </div>
          </form>

          <!-- OTP Verification Section -->
          <div id="otp-section" class="mt-3 sm:mt-4 <% if (!newEmail) { %>hidden<% } %>">
            <div class="bg-blue-50 border border-blue-200 rounded-md p-3 sm:p-4 mb-3 sm:mb-4">
              <p class="text-xs sm:text-sm text-blue-700">
                <strong>Verification email sent to:</strong> <span id="pending-email"><%= newEmail || '' %></span>
              </p>
              <p class="text-xs text-blue-600 mt-1">Please check your inbox and enter the 6-digit OTP below.</p>
            </div>
            
            <form id="verify-email-form">
              <div class="mb-3 sm:mb-4">
                <label for="otp" class="block text-xs sm:text-sm font-medium text-gray-700">Enter OTP</label>
                <input type="text" name="otp" id="otp" maxlength="6" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-1.5 sm:py-2 px-3 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 text-xs sm:text-sm" placeholder="Enter 6-digit OTP" required>
              </div>
              <div class="flex justify-between items-center">
                <button type="button" id="resend-otp-btn" class="text-xs sm:text-sm text-indigo-600 hover:text-indigo-500">
                  Resend OTP
                </button>
                <button type="submit" id="verify-otp-btn" class="inline-flex items-center px-3 sm:px-4 py-1.5 sm:py-2 border border-transparent rounded-md shadow-sm text-xs sm:text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                  <span class="btn-text">Verify Email</span>
                  <div class="hidden loading-spinner ml-1 sm:ml-2">
                    <div class="animate-spin rounded-full h-3 sm:h-4 w-3 sm:w-4 border-b-2 border-white"></div>
                  </div>
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Element references
      const changeEmailForm = document.getElementById('change-email-form');
      const verifyEmailForm = document.getElementById('verify-email-form');
      const otpSection = document.getElementById('otp-section');
      const newEmailInput = document.getElementById('newEmail');
      const otpInput = document.getElementById('otp');
      const pendingEmail = document.getElementById('pending-email');
      const sendOtpBtn = document.getElementById('send-otp-btn');
      const verifyOtpBtn = document.getElementById('verify-otp-btn');
      const resendOtpBtn = document.getElementById('resend-otp-btn');
      const toastSuccess = document.getElementById('toast-success');
      const toastMessage = document.getElementById('toast-message');
      const toastClose = document.getElementById('toast-close');
  
      // Utility functions
      function showToast(message, isError = false) {
        toastMessage.textContent = message;
        toastSuccess.className = `fixed top-4 right-4 p-4 rounded-md shadow-lg flex items-center z-50 ${isError ? 'bg-red-500' : 'bg-green-500'} text-white`;
        toastSuccess.classList.remove('hidden');
        setTimeout(() => toastSuccess.classList.add('hidden'), 5000);
      }
  
      function setButtonLoading(button, loading) {
        const btnText = button.querySelector('.btn-text');
        const spinner = button.querySelector('.loading-spinner');
        if (loading) {
          btnText.classList.add('hidden');
          spinner.classList.remove('hidden');
          button.disabled = true;
        } else {
          btnText.classList.remove('hidden');
          spinner.classList.add('hidden');
          button.disabled = false;
        }
      }
  
      function showOtpSection(email) {
        pendingEmail.textContent = email;
        otpSection.classList.remove('hidden');
        otpInput.focus();
      }
  
      function hideOtpSection() {
        otpSection.classList.add('hidden');
        otpInput.value = '';
      }
  
      // Toast close handler
      toastClose.addEventListener('click', () => {
        toastSuccess.classList.add('hidden');
      });
  
      // Change email form handler
      changeEmailForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const email = newEmailInput.value.trim();
        if (!email) {
          showToast('Please enter a valid email address', true);
          return;
        }
  
        // Email validation
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
          showToast('Please enter a valid email format', true);
          return;
        }
  
        setButtonLoading(sendOtpBtn, true);
  
        try {
          const response = await fetch('/user/profile/change-email', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `newEmail=${encodeURIComponent(email)}`
          });
  
          const data = await response.json();
          
          if (response.ok && data.success) {
            showToast(data.message);
            showOtpSection(email);
          } else {
            showToast(data.message || 'Failed to send verification email', true);
          }
        } catch (error) {
          console.error('Error sending verification email:', error);
          showToast('Network error. Please try again.', true);
        } finally {
          setButtonLoading(sendOtpBtn, false);
        }
      });
  
      // Verify email form handler
      verifyEmailForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const otp = otpInput.value.trim();
        if (!otp || otp.length !== 6) {
          showToast('Please enter a valid 6-digit OTP', true);
          return;
        }
  
        setButtonLoading(verifyOtpBtn, true);
  
        try {
          const response = await fetch('/user/profile/verify-email', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: `otp=${encodeURIComponent(otp)}`
          });
  
          const data = await response.json();
          
          if (response.ok && data.success) {
            showToast(data.message || 'Email updated successfully!');
            hideOtpSection();
            newEmailInput.value = '';
            setTimeout(() => {
              window.location.reload();
            }, 2000);
          } else {
            showToast(data.message || 'Invalid or expired OTP', true);
          }
        } catch (error) {
          console.error('Error verifying OTP:', error);
          showToast('Network error. Please try again.', true);
        } finally {
          setButtonLoading(verifyOtpBtn, false);
        }
      });
  
      // Resend OTP handler
      resendOtpBtn.addEventListener('click', async () => {
        const email = newEmailInput.value.trim();
        if (!email) {
          showToast('Please enter email address first', true);
          return;
        }
  
        // Trigger the change email form submission
        changeEmailForm.dispatchEvent(new Event('submit'));
      });
  
      // Auto-focus OTP input when section is shown
      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
            if (!otpSection.classList.contains('hidden')) {
              setTimeout(() => otpInput.focus(), 100);
            }
          }
        });
      });
      observer.observe(otpSection, { attributes: true });
  
      // Mobile menu and sidebar logic
      const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
      const mobileMenu = document.getElementById('mobile-menu');
      const closeMobileMenu = document.getElementById('close-mobile-menu');
      const toggleSidebar = document.getElementById('toggle-sidebar');
      const sidebar = document.getElementById('sidebar');
  
      mobileMenuToggle?.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
      });
  
      closeMobileMenu?.addEventListener('click', () => {
        mobileMenu.classList.add('hidden');
      });
  
      toggleSidebar?.addEventListener('click', () => {
        sidebar.classList.toggle('hidden');
        mobileMenu.classList.add('hidden');
      });
  
      window.addEventListener('click', (e) => {
        if (e.target === mobileMenu) {
          mobileMenu.classList.add('hidden');
        }
      });
    });

    document.getElementById("editProfileForm").addEventListener("submit", async (e) => {
    e.preventDefault();

    const form = e.target;
    const formData = new FormData(form);

    try {
        const res = await fetch("/user/profile/edit", {
            method: "PUT",
            body: formData,
        });

        const result = await res.json();
        if (result.success) {
            // Success toast notification
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'success',
                title: 'Profile updated successfully!',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true
            });
            setTimeout(() => window.location.reload(), 1000);
        } else {
            // Error toast notification
            Swal.fire({
                toast: true,
                position: 'top-end',
                icon: 'error',
                title: 'Error: ' + result.message,
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true
            });
        }
    } catch (error) {
        // Network error toast notification
        Swal.fire({
            toast: true,
            position: 'top-end',
            icon: 'error',
            title: 'Network error. Please try again.',
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true
        });
        console.error('Error:', error);
    }
});
  </script>
</body>
</html>