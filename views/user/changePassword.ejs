<%- include("partials/uHeader") %>
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Change Password</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: {
              50: '#f0f9ff',
              100: '#e0f2fe',
              500: '#3b82f6',
              600: '#2563eb',
              700: '#1d4ed8',
            },
            success: {
              50: '#f0fdf4',
              100: '#dcfce7',
              500: '#22c55e',
              600: '#16a34a',
            },
            warning: {
              50: '#fefce8',
              100: '#fef9c3',
              500: '#f59e0b',
            },
            danger: {
              50: '#fef2f2',
              100: '#fee2e2',
              500: '#ef4444',
              600: '#dc2626',
            }
          }
        }
      }
    }
  </script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
    body {
      font-family: 'Inter', sans-serif;
    }
    .password-input-container {
      position: relative;
    }
    .password-toggle {
      position: absolute;
      right: 12px;
      top: 36px; /* Adjusted for smaller inputs on mobile */
      cursor: pointer;
      color: #6b7280;
      font-size: 0.875rem; /* Smaller on mobile */
    }
    @media (min-width: 640px) {
      .password-toggle {
        top: 38px; /* Original positioning for larger screens */
        font-size: 1rem;
      }
    }
    .step-connector {
      height: 20px; /* Slightly smaller on mobile */
      width: 2px;
      background-color: #e5e7eb;
      margin-left: 15px;
      margin-top: 2px;
      margin-bottom: 2px;
    }
    @media (min-width: 640px) {
      .step-connector {
        height: 24px; /* Original height for larger screens */
      }
    }
    .step-connector.completed {
      background-color: #22c55e;
    }
    .password-strength {
      height: 4px;
      border-radius: 2px;
      margin-top: 4px;
      transition: all 0.3s ease;
    }
    .strength-0 {
      width: 0%;
      background-color: #ef4444;
    }
    .strength-1 {
      width: 25%;
      background-color: #ef4444;
    }
    .strength-2 {
      width: 50%;
      background-color: #f59e0b;
    }
    .strength-3 {
      width: 75%;
      background-color: #3b82f6;
    }
    .strength-4 {
      width: 100%;
      background-color: #22c55e;
    }
    .input-highlight {
      box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.25);
    }
    @media (max-width: 639px) {
      #sidebar.hidden {
        transform: translateX(-100%);
      }
      .main-content {
        min-height: calc(100vh - 4rem); /* Adjust for header height on mobile */
      }
    }
  </style>
</head>
<body class="bg-gray-50 min-h-screen flex flex-col sm:flex-row">
  <%- include("partials/userSidebar") %>
  <div class="w-full sm:w-64 bg-gray-800 hidden sm:block"></div>
  
  <div class="flex-1 ml-0 sm:ml-64 pt-16 main-content">
    <div class="w-full max-w-full sm:max-w-2xl mx-auto px-4 sm:px-6 lg:px-8 py-4 sm:py-8">
      
      <!-- Page Header -->
      <div class="mb-6 sm:mb-8 text-center">
        <h1 class="text-xl sm:text-2xl font-bold text-gray-900">Account Security</h1>
        <p class="mt-1 sm:mt-2 text-xs sm:text-sm text-gray-600">Manage your password and security settings</p>
      </div>

      <!-- Dynamic Alert Messages -->
      <div id="alertContainer" class="hidden mb-4 sm:mb-6">
        <div id="alertBox" class="p-3 sm:p-4 rounded-lg shadow-sm border">
          <div class="flex items-start">
            <div class="flex-shrink-0">
              <svg id="alertIcon" class="h-4 sm:h-5 w-4 sm:w-5" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
            </div>
            <div class="ml-2 sm:ml-3 flex-1">
              <p id="alertMessage" class="text-xs sm:text-sm font-medium"></p>
            </div>
            <button onclick="document.getElementById('alertContainer').classList.add('hidden')" class="ml-2 text-gray-500 hover:text-gray-600">
              <svg class="h-3 sm:h-4 w-3 sm:w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
      </div>

      <!-- Password Change Card -->
      <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
        <!-- Card Header -->
        <div class="bg-gray-50 px-4 sm:px-6 py-3 sm:py-4 border-b border-gray-200">
          <h2 class="text-base sm:text-lg font-semibold text-gray-800">Change Password</h2>
        </div>
        
        <!-- Step 1: Verify Current Password -->
        <div id="step1" class="password-change-step p-4 sm:p-6">
          <div class="flex items-start">
            <div class="flex flex-col items-center mr-3 sm:mr-4">
              <div class="flex-shrink-0 w-8 sm:w-9 h-8 sm:h-9 rounded-full bg-primary-600 text-white flex items-center justify-center text-sm font-medium">1</div>
              <div class="step-connector"></div>
            </div>
            <div class="flex-1">
              <h3 class="text-sm sm:text-base font-medium text-gray-800 mb-1">Verify Your Identity</h3>
              <p class="text-xs sm:text-sm text-gray-500 mb-3 sm:mb-4">For security reasons, we need to verify your current password</p>
              
              <form id="step1Form" class="space-y-3 sm:space-y-4">
                <div class="password-input-container">
                  <label for="currentPassword" class="block text-xs sm:text-sm font-medium text-gray-700 mb-1">Current Password</label>
                  <input type="password" id="currentPassword" name="currentPassword" 
                         class="block w-full rounded-lg border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-xs sm:text-sm py-2 sm:py-2.5 px-3 border"
                         placeholder="Enter your current password" required>
                  <span class="password-toggle" onclick="togglePassword('currentPassword')">
                    <i class="far fa-eye"></i>
                  </span>
                </div>
                
                <div class="pt-2">
                  <button type="submit" id="requestOtpBtn" 
                          class="w-full flex justify-center items-center px-3 sm:px-4 py-2 sm:py-2.5 rounded-lg shadow-sm text-xs sm:text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-150">
                    <span class="btn-text">Continue to Verification</span>
                    <svg class="animate-spin -mr-1 ml-2 sm:ml-3 h-4 w-4 text-white hidden loading-spinner" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>

        <!-- Step 2: Enter OTP and New Password -->
        <div id="step2" class="password-change-step hidden p-4 sm:p-6">
          <div class="flex items-start">
            <div class="flex flex-col items-center mr-3 sm:mr-4">
              <div class="flex-shrink-0 w-8 sm:w-9 h-8 sm:h-9 rounded-full bg-gray-300 text-gray-600 flex items-center justify-center text-sm font-medium">2</div>
              <div class="step-connector"></div>
            </div>
            <div class="flex-1">
              <h3 class="text-sm sm:text-base font-medium text-gray-800 mb-1">Set New Password</h3>
              <p class="text-xs sm:text-sm text-gray-500 mb-3 sm:mb-4">We've sent a verification code to your email</p>
              
              <!-- Verification Notice -->
              <div class="bg-blue-50 border border-blue-100 rounded-lg p-3 sm:p-4 mb-4 sm:mb-5">
                <div class="flex">
                  <div class="flex-shrink-0">
                    <svg class="h-4 sm:h-5 w-4 sm:w-5 text-blue-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                      <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />
                    </svg>
                  </div>
                  <div class="ml-2 sm:ml-3">
                    <p class="text-xs sm:text-sm text-blue-700">
                      Check your email for a 6-digit verification code. This code will expire in 10 minutes.
                    </p>
                  </div>
                </div>
              </div>

              <form id="step2Form" class="space-y-3 sm:space-y-4">
                <div>
                  <label for="otp" class="block text-xs sm:text-sm font-medium text-gray-700 mb-1">Verification Code</label>
                  <input type="text" id="otp" name="otp" maxlength="6" 
                         class="block w-full rounded-lg border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-xs sm:text-sm py-2 sm:py-2.5 px-3 border text-center tracking-widest font-medium placeholder-gray-400"
                         placeholder="• • • • • •" required>
                </div>
                
                <div class="password-input-container">
                  <label for="newPassword" class="block text-xs sm:text-sm font-medium text-gray-700 mb-1">New Password</label>
                  <input type="password" id="newPassword" name="newPassword" 
                         class="block w-full rounded-lg border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-xs sm:text-sm py-2 sm:py-2.5 px-3 border"
                         placeholder="Create a new password" required>
                  <span class="password-toggle" onclick="togglePassword('newPassword')">
                    <i class="far fa-eye"></i>
                  </span>
                  <div id="passwordStrength" class="password-strength strength-0"></div>
                  <p class="mt-1 text-xs text-gray-500">Password must be at least 8 characters with a mix of letters, numbers, and symbols</p>
                </div>
                
                <div class="password-input-container">
                  <label for="confirmPassword" class="block text-xs sm:text-sm font-medium text-gray-700 mb-1">Confirm New Password</label>
                  <input type="password" id="confirmPassword" name="confirmPassword" 
                         class="block w-full rounded-lg border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 text-xs sm:text-sm py-2 sm:py-2.5 px-3 border"
                         placeholder="Re-enter your new password" required>
                  <span class="password-toggle" onclick="togglePassword('confirmPassword')">
                    <i class="far fa-eye"></i>
                  </span>
                </div>
                
                <div class="flex justify-between pt-2">
                  <button type="button" id="backToStep1" 
                          class="inline-flex items-center px-3 sm:px-4 py-2 sm:py-2.5 border border-gray-300 rounded-lg shadow-sm text-xs sm:text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors duration-150">
                    <svg class="-ml-0.5 mr-1 sm:mr-2 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                    </svg>
                    Back
                  </button>
                  <button type="submit" id="changePasswordBtn" 
                          class="inline-flex items-center px-3 sm:px-4 py-2 sm:py-2.5 border border-transparent rounded-lg shadow-sm text-xs sm:text-sm font-medium text-white bg-success-600 hover:bg-success-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-success-500 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-150">
                    <span class="btn-text">Update Password</span>
                    <svg class="animate-spin -mr-1 ml-2 sm:ml-3 h-4 w-4 text-white hidden loading-spinner" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                  </button>
                </div>
              </form>

              <!-- Resend OTP -->
              <div class="mt-4 sm:mt-5 text-center">
                <p class="text-xs sm:text-sm text-gray-600">
                  Didn't receive the code? 
                  <button id="resendOtp" class="text-primary-600 hover:text-primary-700 font-medium disabled:opacity-50 disabled:cursor-not-allowed">
                    <span class="resend-text">Resend Code</span>
                    <span id="resendTimer" class="hidden text-gray-500 ml-1"></span>
                  </button>
                </p>
              </div>
            </div>
          </div>
        </div>

        <!-- Step 3: Success -->
        <div id="step3" class="password-change-step hidden p-4 sm:p-8">
          <div class="flex flex-col items-center text-center py-3 sm:py-4">
            <div class="mx-auto flex items-center justify-center h-12 sm:h-16 w-12 sm:w-16 rounded-full bg-success-100 mb-3 sm:mb-4">
              <svg class="h-6 sm:h-8 w-6 sm:w-8 text-success-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <h3 class="text-lg sm:text-xl font-semibold text-gray-900 mb-2">Password Changed!</h3>
            <p class="text-xs sm:text-sm text-gray-600 mb-4 sm:mb-6 max-w-md">Your password has been successfully updated. For security reasons, you'll be logged out of all other devices except this one.</p>
            <button onclick="window.location.href='/user/profile'" 
                    class="inline-flex items-center px-4 sm:px-5 py-2 sm:py-2.5 border border-transparent rounded-lg shadow-sm text-xs sm:text-sm font-medium text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors duration-150">
              Back to Profile Settings
              <svg class="ml-1 sm:ml-2 -mr-0.5 h-4 w-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Password toggle function
    function togglePassword(fieldId) {
      const field = document.getElementById(fieldId);
      const toggle = field.nextElementSibling;
      if (field.type === "password") {
        field.type = "text";
        toggle.innerHTML = '<i class="far fa-eye-slash"></i>';
      } else {
        field.type = "password";
        toggle.innerHTML = '<i class="far fa-eye"></i>';
      }
    }

    // Password strength calculation
    function calculatePasswordStrength(password) {
      let strength = 0;
      
      // Length check
      if (password.length >= 8) strength++;
      if (password.length >= 12) strength++;
      
      // Character type checks
      if (/[A-Z]/.test(password)) strength++;
      if (/\d/.test(password)) strength++;
      if (/[^A-Za-z0-9]/.test(password)) strength++;
      
      // Cap at 4 for our meter
      return Math.min(strength, 4);
    }

    document.addEventListener('DOMContentLoaded', function() {
      // Password change functionality
      const step1Form = document.getElementById('step1Form');
      const step2Form = document.getElementById('step2Form');
      const requestOtpBtn = document.getElementById('requestOtpBtn');
      const changePasswordBtn = document.getElementById('changePasswordBtn');
      const backToStep1 = document.getElementById('backToStep1');
      const resendOtp = document.getElementById('resendOtp');
      
      let resendTimer = null;
      let resendCountdown = 0;
      let storedCurrentPassword = ''; // Store current password for resend functionality

      // Utility functions
      function showAlert(message, type = 'info') {
        const alertContainer = document.getElementById('alertContainer');
        const alertBox = document.getElementById('alertBox');
        const alertIcon = document.getElementById('alertIcon');
        const alertMessage = document.getElementById('alertMessage');

        // Clear existing classes
        alertBox.className = 'p-4 rounded-lg shadow-sm border';
        
        // Set styles based on type
        if (type === 'success') {
          alertBox.classList.add('bg-success-50', 'border-success-100');
          alertMessage.className = 'text-sm font-medium text-success-800';
          alertIcon.className = 'h-5 w-5 text-success-500';
          alertIcon.innerHTML = '<path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />';
        } else if (type === 'error') {
          alertBox.classList.add('bg-danger-50', 'border-danger-100');
          alertMessage.className = 'text-sm font-medium text-danger-800';
          alertIcon.className = 'h-5 w-5 text-danger-500';
          alertIcon.innerHTML = '<path fill-rule="evenodd" d="M10 18a8 8 0 11-16 0 8 8 0 0116 0zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />';
        } else if (type === 'warning') {
          alertBox.classList.add('bg-warning-50', 'border-warning-100');
          alertMessage.className = 'text-sm font-medium text-warning-800';
          alertIcon.className = 'h-5 w-5 text-warning-500';
          alertIcon.innerHTML = '<path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />';
        } else {
          alertBox.classList.add('bg-primary-50', 'border-primary-100');
          alertMessage.className = 'text-sm font-medium text-primary-800';
          alertIcon.className = 'h-5 w-5 text-primary-500';
          alertIcon.innerHTML = '<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd" />';
        }

        alertMessage.textContent = message;
        alertContainer.classList.remove('hidden');
        alertContainer.scrollIntoView({ behavior: 'smooth', block: 'nearest' });

        // Auto hide after 5 seconds
        setTimeout(() => {
          alertContainer.classList.add('hidden');
        }, 5000);
      }

      function setLoading(button, isLoading) {
        const btnText = button.querySelector('.btn-text');
        const spinner = button.querySelector('.loading-spinner');

        if (isLoading) {
          button.disabled = true;
          spinner.classList.remove('hidden');
          button.classList.add('opacity-75');
        } else {
          button.disabled = false;
          spinner.classList.add('hidden');
          button.classList.remove('opacity-75');
        }
      }

      function showStep(stepNumber) {
        // Hide all steps
        document.querySelectorAll('.password-change-step').forEach(step => {
          step.classList.add('hidden');
        });

        // Show the requested step
        const targetStep = document.getElementById(`step${stepNumber}`);
        if (targetStep) {
          targetStep.classList.remove('hidden');
        }

        // Update step indicators
        updateStepIndicators(stepNumber);
      }

      function updateStepIndicators(currentStep) {
        // Update step circle colors and states
        for (let i = 1; i <= 3; i++) {
          const stepIndicators = document.querySelectorAll(`.password-change-step:nth-child(${i}) .w-9`);
          const stepConnectors = document.querySelectorAll(`.password-change-step:nth-child(${i}) .step-connector`);
          
          stepIndicators.forEach(indicator => {
            if (i < currentStep) {
              // Completed step
              indicator.className = 'flex-shrink-0 w-9 h-9 rounded-full bg-success-600 text-white flex items-center justify-center text-sm font-medium';
              indicator.innerHTML = '<svg class="h-5 w-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" /></svg>';
            } else if (i === currentStep) {
              // Current step
              indicator.className = 'flex-shrink-0 w-9 h-9 rounded-full bg-primary-600 text-white flex items-center justify-center text-sm font-medium';
              indicator.textContent = i;
            } else {
              // Future step
              indicator.className = 'flex-shrink-0 w-9 h-9 rounded-full bg-gray-300 text-gray-600 flex items-center justify-center text-sm font-medium';
              indicator.textContent = i;
            }
          });
          
          // Update connectors
          stepConnectors.forEach(connector => {
            if (i < currentStep) {
              connector.classList.add('completed');
            } else {
              connector.classList.remove('completed');
            }
          });
        }
      }

      function startResendTimer() {
        resendCountdown = 60;
        const resendText = document.querySelector('.resend-text');
        const resendTimerSpan = document.getElementById('resendTimer');
        
        resendOtp.disabled = true;
        resendText.classList.add('hidden');
        resendTimerSpan.classList.remove('hidden');
        
        resendTimer = setInterval(() => {
          resendTimerSpan.textContent = `(wait ${resendCountdown}s)`;
          resendCountdown--;
          
          if (resendCountdown < 0) {
            clearInterval(resendTimer);
            resendOtp.disabled = false;
            resendText.classList.remove('hidden');
            resendTimerSpan.classList.add('hidden');
          }
        }, 1000);
      }

      function clearResendTimer() {
        if (resendTimer) {
          clearInterval(resendTimer);
          resendTimer = null;
        }
        resendCountdown = 0;
        const resendText = document.querySelector('.resend-text');
        const resendTimerSpan = document.getElementById('resendTimer');
        
        resendOtp.disabled = false;
        resendText.classList.remove('hidden');
        resendTimerSpan.classList.add('hidden');
      }

      function validatePasswords() {
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;

        if (newPassword.length < 8) {
          showAlert('Password must be at least 8 characters long', 'error');
          return false;
        }

        if (newPassword !== confirmPassword) {
          showAlert('New passwords do not match', 'error');
          return false;
        }

        return true;
      }

      // Step 1: Request OTP
      step1Form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const currentPassword = document.getElementById('currentPassword').value.trim();
        if (!currentPassword) {
          showAlert('Please enter your current password', 'error');
          return;
        }

        storedCurrentPassword = currentPassword; // Store for resend functionality
        setLoading(requestOtpBtn, true);

        try {
          const response = await fetch('/user/request-password-change-otp', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ currentPassword })
          });

          const data = await response.json();

          if (data.success) {
            showAlert(data.message, 'success');
            showStep(2);
            startResendTimer();
            // Clear the current password field
            document.getElementById('currentPassword').value = '';
          } else {
            showAlert(data.message, 'error');
          }
        } catch (error) {
          console.error('Error requesting OTP:', error);
          showAlert('Network error. Please check your connection and try again.', 'error');
        } finally {
          setLoading(requestOtpBtn, false);
        }
      });

      // Step 2: Verify OTP and Change Password
      step2Form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const otp = document.getElementById('otp').value.trim();
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;

        if (!otp || !newPassword || !confirmPassword) {
          showAlert('All fields are required', 'error');
          return;
        }

        if (otp.length !== 6) {
          showAlert('Please enter a valid 6-digit verification code', 'error');
          return;
        }

        if (!validatePasswords()) {
          return;
        }

        setLoading(changePasswordBtn, true);

        try {
          const response = await fetch('/user/verify-otp-and-change-password', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ otp, newPassword, confirmPassword })
          });

          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }

          const data = await response.json();

          if (data.success) {
            showAlert(data.message, 'success');
            clearResendTimer();
            showStep(3);
            
            // Clear all form fields
            document.getElementById('otp').value = '';
            document.getElementById('newPassword').value = '';
            document.getElementById('confirmPassword').value = '';
          } else {
            showAlert(data.message, 'error');
          }
        } catch (error) {
          console.error('Error changing password:', error);
          
          if (error.name === 'TypeError' && error.message.includes('fetch')) {
            showAlert('Unable to connect to server. Please check your internet connection.', 'error');
          } else if (error.message.includes('HTTP error')) {
            showAlert('Server error occurred. Please try again later.', 'error');
          } else {
            showAlert('Network error. Please check your connection and try again.', 'error');
          }
        } finally {
          setLoading(changePasswordBtn, false);
        }
      });

      // Back to Step 1
      backToStep1.addEventListener('click', function() {
        showStep(1);
        clearResendTimer();
        
        // Clear step 2 form fields
        document.getElementById('otp').value = '';
        document.getElementById('newPassword').value = '';
        document.getElementById('confirmPassword').value = '';
        
        // Restore the current password
        document.getElementById('currentPassword').value = storedCurrentPassword;
      });

      // Resend OTP
      resendOtp.addEventListener('click', async function() {
        if (resendOtp.disabled) return;

        if (!storedCurrentPassword) {
          showAlert('Please go back and enter your current password first', 'error');
          return;
        }

        try {
          const response = await fetch('/user/request-password-change-otp', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ currentPassword: storedCurrentPassword })
          });

          const data = await response.json();

          if (data.success) {
            showAlert('New verification code sent to your email', 'success');
            startResendTimer();
            document.getElementById('otp').value = ''; // Clear OTP field
          } else {
            showAlert(data.message, 'error');
          }
        } catch (error) {
          console.error('Error resending OTP:', error);
          showAlert('Failed to resend verification code. Please try again.', 'error');
        }
      });

      // Auto-format OTP input
      const otpInput = document.getElementById('otp');
      otpInput.addEventListener('input', function(e) {
        // Remove any non-digit characters
        this.value = this.value.replace(/\D/g, '');
        
        // Limit to 6 digits
        if (this.value.length > 6) {
          this.value = this.value.slice(0, 6);
        }
      });

      // Auto-focus to new password field when OTP is complete
      otpInput.addEventListener('input', function(e) {
        if (this.value.length === 6) {
          document.getElementById('newPassword').focus();
        }
      });

      // Real-time password validation feedback
      const newPasswordInput = document.getElementById('newPassword');
      const confirmPasswordInput = document.getElementById('confirmPassword');
      const passwordStrengthMeter = document.getElementById('passwordStrength');

      function updatePasswordValidation() {
        const newPassword = newPasswordInput.value;
        const confirmPassword = confirmPasswordInput.value;

        // Update password strength meter
        const strength = calculatePasswordStrength(newPassword);
        passwordStrengthMeter.className = `password-strength strength-${strength}`;

        // Remove existing validation classes
        newPasswordInput.classList.remove('border-red-500', 'border-green-500', 'input-highlight');
        confirmPasswordInput.classList.remove('border-red-500', 'border-green-500', 'input-highlight');

        if (newPassword.length > 0) {
          if (newPassword.length >= 8) {
            newPasswordInput.classList.add('border-green-500', 'input-highlight');
          } else {
            newPasswordInput.classList.add('border-red-500', 'input-highlight');
          }
        }

        if (confirmPassword.length > 0) {
          if (confirmPassword === newPassword && newPassword.length >= 8) {
            confirmPasswordInput.classList.add('border-green-500', 'input-highlight');
          } else {
            confirmPasswordInput.classList.add('border-red-500', 'input-highlight');
          }
        }
      }

      newPasswordInput.addEventListener('input', updatePasswordValidation);
      confirmPasswordInput.addEventListener('input', updatePasswordValidation);

      // Initialize the form (show step 1)
      showStep(1);

      // Hide alert when user starts typing in any form field
      document.querySelectorAll('input').forEach(input => {
        input.addEventListener('focus', () => {
          const alertContainer = document.getElementById('alertContainer');
          if (!alertContainer.classList.contains('hidden')) {
            setTimeout(() => {
              alertContainer.classList.add('hidden');
            }, 500);
          }
        });
      });
    });
  </script>
</body>
</html>