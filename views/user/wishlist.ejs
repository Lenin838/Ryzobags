<%- include("partials/userHeader") %>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= pageTitle %></title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>
    tailwind.config = {
      theme: {
        extend: {
          colors: {
            primary: {
              DEFAULT: '#007D8B',
              dark: '#006570',
              light: '#4cacb6',
            },
            secondary: '#f8f9fa',
          },
          fontFamily: {
            sans: ['Inter', 'sans-serif'],
          },
        },
      },
    };
  </script>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body class="bg-gray-50 font-sans">
  <!-- Breadcrumbs -->
  <div class="bg-gradient-to-r from-primary-dark to-primary py-8">
    <div class="container mx-auto px-4">
      <h1 class="text-3xl md:text-4xl font-bold text-white mb-2">Your Wishlist</h1>
      <div class="flex items-center text-primary-light">
        <a href="/user/home" class="hover:text-white transition-colors">Home</a>
        <span class="mx-2">/</span>
        <span class="text-white">Wishlist</span>
      </div>
    </div>
  </div>

  <!-- Main Content -->
  <div class="container mx-auto px-4 py-8">
    <% if (error && error.length > 0) { %>
    <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4 mx-4" role="alert">
      <p><%= error %></p>
    </div>
  <% } %>

    <% if (!wishlist || wishlist.products.length === 0) { %>
      <!-- Empty Wishlist -->
      <div class="bg-white p-8 rounded-xl shadow-sm border border-gray-100 text-center">
        <i class="fa-regular fa-heart text-5xl text-gray-400 mb-4"></i>
        <h2 class="text-2xl font-bold text-gray-800 mb-2">Your Wishlist is Empty</h2>
        <p class="text-gray-600 mb-6">Looks like you haven't added any items to your wishlist yet.</p>
        <a href="/user/shop" class="inline-block px-6 py-3 bg-primary text-white rounded-lg font-medium hover:bg-primary-dark transition">
          Continue Shopping
        </a>
      </div>
    <% } else { %>
      <!-- Wishlist Items -->
      <div class="bg-white p-6 md:p-8 rounded-xl shadow-sm border border-gray-100">
        <h2 class="text-2xl font-bold text-gray-800 mb-6 flex items-center">
          <span class="w-1.5 h-6 bg-primary rounded-full mr-3"></span>
          Wishlist (<span id="wishlist-count"><%= wishlist.products.length %></span> items)
        </h2>

        <div id="wishlist-items" class="space-y-6">
          <% wishlist.products.forEach(item => { %>
            <div class="wishlist-item flex flex-col md:flex-row items-start md:items-center border-b border-gray-100 pb-6 last:border-b-0" data-product-id="<%= item.product._id %>">
              <!-- Product Image -->
              <div class="w-full md:w-32 h-32 rounded-lg overflow-hidden border border-gray-100">
                <a href="/user/productView/<%= item.product._id %>">
                  <img src="<%= item.product.mainImage %>" alt="<%= item.product.name %>" class="w-full h-full object-cover">
                </a>
              </div>

              <!-- Product Details -->
              <div class="flex-1 mt-4 md:mt-0 md:ml-6">
                <a href="/user/productView/<%= item.product._id %>" class="text-lg font-medium text-gray-800 hover:text-primary transition">
                  <%= item.product.name %>
                </a>
                <% const variant = item.product.variants[0]; %>
                  <% if (variant) { %>
                    <div class="flex items-center mt-2">
                      <span class="text-lg font-bold text-primary">
                        ₹<%= variant.discountedPrice %>
                      </span>

                      <% if (variant.discountedPrice < variant.regularPrice) { %>
                        <span class="text-sm line-through text-gray-500 ml-2">₹<%= variant.regularPrice %></span>
                        <span class="text-sm text-green-600 ml-2">
                          (<%= Math.round(((variant.regularPrice - variant.discountedPrice) / variant.regularPrice) * 100) %>% OFF)
                        </span>
                      <% } %>
                    </div>
                  <% } %>

                <div class="flex items-center mt-2">
                  <% if (item.hasStock) { %>
                    <span class="text-green-600 font-medium flex items-center">
                      <i class="fa-solid fa-check mr-1"></i> In Stock
                    </span>
                  <% } else { %>
                    <span class="text-red-600 font-medium flex items-center">
                      <i class="fa-solid fa-xmark mr-1"></i> Out of Stock
                    </span>
                  <% } %>
                </div>
              </div>

              <!-- Actions -->
              <div class="flex items-center space-x-3 mt-4 md:mt-0">
                <% if (item.hasStock) { %>
                  <button onclick="addToCartFromWishlist('<%= item.product._id %>')" class="px-4 py-2 bg-primary text-white rounded-lg font-medium hover:bg-primary-dark transition flex items-center">
                    <i class="fa-solid fa-cart-plus mr-2"></i> Add to Cart
                  </button>
                <% } %>
                <button onclick="removeFromWishlist('<%= item.product._id %>')" class="px-4 py-2 bg-gray-100 text-gray-700 rounded-lg font-medium hover:bg-red-50 hover:text-red-600 transition flex items-center">
                  <i class="fa-solid fa-trash mr-2"></i> Remove
                </button>
              </div>
            </div>
          <% }) %>
        </div>
      </div>
    <% } %>
  </div>

  <%- include("partials/userFooter") %>

  <script>
    // Fetch and update wishlist count
    async function updateWishlistCount() {
      try {
        const response = await fetch('/user/wishlist/count', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        });
        const result = await response.json();
        if (result.success) {
          const wishlistCountElement = document.getElementById('wishlist-count');
          if (wishlistCountElement) {
            wishlistCountElement.textContent = result.count;
          }
          const headerWishlistCount = document.getElementById('header-wishlist-count');
          if (headerWishlistCount) {
            headerWishlistCount.textContent = result.count;
          }
        }
      } catch (error) {
        console.error('Error updating wishlist count:', error);
      }
    }

    // Fetch and update cart count (for header)
    async function updateCartCount() {
      try {
        const response = await fetch('/user/cart/count', {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        });
        const result = await response.json();
        if (result.success) {
          const cartCountElement = document.getElementById('header-cart-count');
          if (cartCountElement) {
            cartCountElement.textContent = result.count;
          }
        }
      } catch (error) {
        console.error('Error updating cart count:', error);
      }
    }

    // Add to cart from wishlist
    async function addToCartFromWishlist(productId) {
      try {
        // Since wishlist no longer stores size, prompt user to select a size or redirect to product page
        Swal.fire({
          title: 'Select a Size',
          text: 'Please select a size to add this product to your cart.',
          icon: 'info',
          confirmButtonText: 'Go to Product Page',
          confirmButtonColor: '#007D8B',
          showCancelButton: true,
          cancelButtonText: 'Cancel',
        }).then((result) => {
          if (result.isConfirmed) {
            window.location.href = `/user/productView/${productId}`;
          }
        });
      } catch (error) {
        console.error('Error adding to cart:', error);
        Swal.fire({
          icon: 'error',
          title: 'Error',
          text: error.message || 'Something went wrong. Please try again.',
          confirmButtonColor: '#007D8B',
        });
      }
    }

  // Replace your removeFromWishlist function with this debug version
async function removeFromWishlist(productId) {
  try {
    console.log('=== DEBUG: Starting removeFromWishlist ===');
    console.log('Product ID:', productId);
    console.log('URL being called:', `/user/removeFromWishlist/${productId}`);
    
    const response = await fetch(`/user/removeFromWishlist/${productId}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
    });

    console.log('Response status:', response.status);
    console.log('Response headers:', response.headers);
    console.log('Response URL:', response.url);
    
    // Check what type of response we got
    const contentType = response.headers.get('content-type');
    console.log('Content-Type:', contentType);
    
    // Get the raw response text first
    const responseText = await response.text();
    console.log('Raw response:', responseText.substring(0, 200) + '...');
    
    // Try to parse as JSON
    let result;
    try {
      result = JSON.parse(responseText);
      console.log('Parsed JSON:', result);
    } catch (parseError) {
      console.error('JSON Parse Error:', parseError);
      console.log('Response is not JSON. First 500 chars:', responseText.substring(0, 500));
      
      // Show user-friendly error
      Swal.fire({
        icon: 'error',
        title: 'Server Error',
        text: 'The server returned an unexpected response. Please check the console for details.',
        confirmButtonColor: '#007D8B',
      });
      return;
    }

    // Continue with normal processing if JSON parsing succeeds
    if (response.ok && result.success) {
      Swal.fire({
        icon: 'success',
        title: 'Removed!',
        text: result.message || 'Product removed from wishlist!',
        confirmButtonColor: '#007D8B',
        timer: 1500,
        showConfirmButton: false
      }).then(() => {
        // Remove the item from DOM
        const itemElement = document.querySelector(`.wishlist-item[data-product-id="${productId}"]`);
        if (itemElement) {
          itemElement.remove();
        }
        
        // Update counts and reload if needed
        updateWishlistCount();
        const remainingItems = document.querySelectorAll('.wishlist-item');
        if (remainingItems.length === 0) {
          setTimeout(() => location.reload(), 500);
        }
      });
    } else {
      throw new Error(result.message || 'Failed to remove item');
    }
    
  } catch (error) {
    console.error('=== DEBUG: Error in removeFromWishlist ===', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: error.message || 'Something went wrong. Please try again.',
      confirmButtonColor: '#007D8B',
    });
  }
}
    // Initialize counts on page load
    document.addEventListener('DOMContentLoaded', () => {
      updateWishlistCount();
      updateCartCount();
    });
  </script>
</body>
</html>