<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reset Password | RYZO Bags</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .password-toggle {
            right: 8px sm:right: 10px;
            top: 50%;
            transform: translateY(-50%);
            cursor: pointer;
            font-size: 0.875rem sm:font-size: 1rem;
        }
        .error-text {
            color: #e53e3e;
            font-size: 0.75rem sm:font-size: 0.875rem;
            margin-top: 0.25rem;
        }
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        @media (max-width: 640px) {
            .toast {
                padding: 0.5rem 1rem;
                top: 1rem;
                right: 1rem;
                font-size: 0.875rem;
            }
        }
    </style>
</head>
<body class="bg-gray-50 min-h-screen flex items-center">
    <div class="container mx-auto px-2 sm:px-4 py-6 sm:py-8">
        <div class="w-full max-w-md sm:max-w-lg lg:max-w-xl mx-auto bg-white rounded-xl shadow-md overflow-hidden fade-in">
            <!-- Header with Logo -->
            <div class="bg-indigo-600 p-4 sm:p-6 text-center">
                <a href="/" class="flex justify-center items-center space-x-2">
                    <i class="fas fa-shopping-bag text-white text-xl sm:text-2xl"></i>
                    <span class="text-white font-bold text-lg sm:text-xl">RYZO BAGS</span>
                </a>
                <h1 class="text-white text-xl sm:text-2xl font-bold mt-3 sm:mt-4">Create New Password</h1>
            </div>
            
            <!-- Error Message for Invalid Token -->
            <% if (typeof errors !== 'undefined' && errors.token) { %>
            <div class="p-4 sm:p-6 bg-red-50 text-red-800 text-center border-b">
                <i class="fas fa-exclamation-triangle text-2xl sm:text-3xl mb-2"></i>
                <h3 class="font-bold text-base sm:text-lg mb-1">Link Expired</h3>
                <p class="text-sm sm:text-base"><%= errors.token %></p>
                <a href="/user/forgot-password" class="mt-3 sm:mt-4 inline-block bg-indigo-600 text-white px-3 sm:px-4 py-1 sm:py-2 rounded-lg hover:bg-indigo-700 transition duration-300 text-sm sm:text-base">
                    Request New Reset Link
                </a>
            </div>
            <% } else { %>
            
            <!-- Form Section -->
            <div class="p-4 sm:p-6 lg:p-8">
                <p class="text-gray-600 text-sm sm:text-base mb-4 sm:mb-6">
                    Please create a new password for your account. Make sure it's strong and unique.
                </p>
                
                <form id="reset-password-form">
                    <!-- New Password Field -->
                    <div class="mb-4 sm:mb-6 relative">
                        <label for="new-password" class="block text-gray-700 text-xs sm:text-sm font-bold mb-2">
                            New Password
                        </label>
                        <div class="relative">
                            <input 
                                type="password" 
                                id="new-password" 
                                placeholder="Enter new password" 
                                class="shadow appearance-none border rounded w-full py-2 sm:py-3 px-3 sm:px-4 text-sm sm:text-base text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent pr-10"
                                name="password"
                                minlength="8"
                                required
                            >
                            <span class="absolute password-toggle text-gray-400 hover:text-gray-600" onclick="togglePassword('new-password', 'new-password-icon')">
                                <i id="new-password-icon" class="fas fa-eye"></i>
                            </span>
                        </div>
                        <p class="error-text" id="password-error"></p>
                        <p class="text-xs text-gray-500 mt-1">Minimum 8 characters with at least one number and one special character</p>
                    </div>
                    
                    <!-- Confirm Password Field -->
                    <div class="mb-4 sm:mb-6 relative">
                        <label for="confirm-password" class="block text-gray-700 text-xs sm:text-sm font-bold mb-2">
                            Confirm New Password
                        </label>
                        <div class="relative">
                            <input 
                                type="password" 
                                id="confirm-password" 
                                placeholder="Confirm new password" 
                                class="shadow appearance-none border rounded w-full py-2 sm:py-3 px-3 sm:px-4 text-sm sm:text-base text-gray-700 leading-tight focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:border-transparent pr-10"
                                name="confirmPassword"
                                required
                            >
                            <span class="absolute password-toggle text-gray-400 hover:text-gray-600" onclick="togglePassword('confirm-password', 'confirm-password-icon')">
                                <i id="confirm-password-icon" class="fas fa-eye"></i>
                            </span>
                        </div>
                        <p class="error-text" id="confirm-password-error"></p>
                    </div>
                    
                    <!-- Password Strength Meter -->
                    <div class="mb-4 sm:mb-6">
                        <div class="flex justify-between mb-1">
                            <span class="text-xs font-medium text-gray-500">Password strength</span>
                            <span id="strength-text" class="text-xs font-medium text-gray-500">None</span>
                        </div>
                        <div class="w-full bg-gray-200 rounded-full h-1.5 sm:h-2">
                            <div id="password-strength" class="bg-gray-400 h-1.5 sm:h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                        </div>
                    </div>
                    
                    <div class="flex items-center justify-between mb-4 sm:mb-6">
                        <button 
                            type="submit" 
                            class="bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-2 sm:py-3 px-4 sm:px-6 rounded-lg focus:outline-none focus:shadow-outline transition duration-300 w-full disabled:opacity-50 disabled:cursor-not-allowed text-sm sm:text-base"
                            id="submit-btn"
                        >
                            Reset Password
                        </button>
                    </div>
                </form>
                
                <!-- Success Message (hidden by default) -->
                <div id="success-message" class="hidden text-center">
                    <div class="p-4 sm:p-6 bg-green-50 text-green-800 rounded-lg">
                        <i class="fas fa-check-circle text-2xl sm:text-3xl mb-2"></i>
                        <h3 class="font-bold text-base sm:text-lg mb-1">Password Updated!</h3>
                        <p class="text-sm sm:text-base mb-3 sm:mb-4">Your password has been successfully reset.</p>
                        <a href="/user/login" class="inline-block bg-indigo-600 text-white px-3 sm:px-4 py-1 sm:py-2 rounded-lg hover:bg-indigo-700 transition duration-300 text-sm sm:text-base">
                            Continue to Login
                        </a>
                    </div>
                </div>
            </div>
            <% } %>
        </div>
        
        <!-- Footer -->
        <div class="text-center mt-6 sm:mt-8 text-gray-500 text-xs sm:text-sm">
            <p>Â© 2025 RYZO Bags. All rights reserved.</p>
        </div>
    </div>

    <script>
        // Get token from URL
        function getTokenFromUrl() {
            const pathParts = window.location.pathname.split('/');
            return pathParts[pathParts.length - 1];
        }

        // Toggle Password Visibility
        function togglePassword(inputId, iconId) {
            const input = document.getElementById(inputId);
            const icon = document.getElementById(iconId);
            if (input.type === "password") {
                input.type = "text";
                icon.classList.remove("fa-eye");
                icon.classList.add("fa-eye-slash");
            } else {
                input.type = "password";
                icon.classList.remove("fa-eye-slash");
                icon.classList.add("fa-eye");
            }
        }
    
        // Show toast notification
        function showToast(message, type = "success") {
            const bgColor = type === "success" ? "bg-green-500" : "bg-red-500";
            const toast = document.createElement("div");
            toast.textContent = message;
            toast.className = `${bgColor} text-white px-6 py-3 rounded-lg fixed top-5 right-5 shadow-lg z-50 fade-in toast`;
            document.body.appendChild(toast);
    
            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transform = 'translateY(-20px)';
                setTimeout(() => toast.remove(), 300);
            }, 3000);
        }

        // Check password strength
        function checkPasswordStrength(password) {
            let strength = 0;
            const strengthBar = document.getElementById("password-strength");
            const strengthText = document.getElementById("strength-text");
            
            if (password.length === 0) {
                strengthBar.style.width = "0%";
                strengthBar.classList.remove("bg-red-500", "bg-yellow-500", "bg-green-500");
                strengthBar.classList.add("bg-gray-400");
                strengthText.textContent = "None";
                return;
            }
            
            // Add points for different criteria
            if (password.length >= 8) strength += 25;
            if (password.match(/[a-z]+/)) strength += 15;
            if (password.match(/[A-Z]+/)) strength += 15;
            if (password.match(/[0-9]+/)) strength += 20;
            if (password.match(/[^a-zA-Z0-9]+/)) strength += 25;
            
            // Set the strength bar width
            strengthBar.style.width = strength + "%";
            
            // Update color and text based on strength
            strengthBar.classList.remove("bg-red-500", "bg-yellow-500", "bg-green-500", "bg-gray-400");
            
            if (strength < 40) {
                strengthBar.classList.add("bg-red-500");
                strengthText.textContent = "Weak";
            } else if (strength < 70) {
                strengthBar.classList.add("bg-yellow-500");
                strengthText.textContent = "Medium";
            } else {
                strengthBar.classList.add("bg-green-500");
                strengthText.textContent = "Strong";
            }
            
            return strength;
        }

        // Initialize page
        document.addEventListener("DOMContentLoaded", () => {
            const form = document.getElementById("reset-password-form");
            
            // Only proceed if form exists (not on error page)
            if (!form) return;
            
            const passwordInput = document.getElementById("new-password");
            const confirmPasswordInput = document.getElementById("confirm-password");
            const submitBtn = document.getElementById("submit-btn");
            
            // Add password strength checker
            passwordInput.addEventListener("input", function() {
                checkPasswordStrength(this.value);
                // Clear password error when user starts typing
                document.getElementById("password-error").textContent = "";
            });
            
            // Validate password match in real-time
            confirmPasswordInput.addEventListener("input", function() {
                const errorElement = document.getElementById("confirm-password-error");
                if (this.value !== passwordInput.value) {
                    errorElement.textContent = "Passwords do not match";
                } else {
                    errorElement.textContent = "";
                }
            });

            // Form submission
            form.addEventListener("submit", async function(event) {
                event.preventDefault();

                // Clear previous errors
                document.getElementById("password-error").textContent = "";
                document.getElementById("confirm-password-error").textContent = "";

                const password = passwordInput.value.trim();
                const confirmPassword = confirmPasswordInput.value.trim();
                const token = getTokenFromUrl();
                
                console.log("Submitting form with token:", token);
                
                // Client-side validation
                let hasErrors = false;
                
                if (password.length < 8) {
                    document.getElementById("password-error").textContent = "Password must be at least 8 characters";
                    hasErrors = true;
                }
                
                if (!password.match(/[0-9]/)) {
                    document.getElementById("password-error").textContent = "Password must contain at least one number";
                    hasErrors = true;
                }
                
                if (!password.match(/[^a-zA-Z0-9]/)) {
                    document.getElementById("password-error").textContent = "Password must contain at least one special character";
                    hasErrors = true;
                }
                
                if (password !== confirmPassword) {
                    document.getElementById("confirm-password-error").textContent = "Passwords do not match";
                    hasErrors = true;
                }

                if (hasErrors) return;

                // Disable submit button and show loading
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Processing...';

                try {
                    const resetUrl = `/user/reset-password/${token}`;
                    console.log("Making request to:", resetUrl);
                    
                    const response = await fetch(resetUrl, {
                        method: "PUT",
                        headers: { 
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        },
                        body: JSON.stringify({ 
                            password, 
                            confirmPassword 
                        })
                    });

                    console.log("Response status:", response.status);

                    let data;
                    try {
                        data = await response.json();
                    } catch (parseError) {
                        console.error("Failed to parse JSON response:", parseError);
                        throw new Error("Invalid response from server");
                    }

                    console.log("Server response:", data);

                    if (!response.ok) {
                        // Handle validation errors
                        if (data.errors) {
                            if (data.errors.password) {
                                document.getElementById("password-error").textContent = data.errors.password;
                            }
                            if (data.errors.confirmPassword) {
                                document.getElementById("confirm-password-error").textContent = data.errors.confirmPassword;
                            }
                        } else {
                            showToast(data.message || "Password reset failed", "error");
                            
                            // If token is invalid/expired, redirect to forgot password
                            if (data.message && data.message.includes("Invalid or expired token")) {
                                setTimeout(() => {
                                    window.location.href = "/user/forgot-password";
                                }, 2000);
                            }
                        }
                        return;
                    }

                    // Success - hide form and show success message
                    form.style.display = "none";
                    document.getElementById("success-message").classList.remove("hidden");
                    showToast(data.message || "Password reset successful!", "success");

                    // Redirect after 3 seconds
                    setTimeout(() => {
                        window.location.href = "/user/login";
                    }, 3000);

                } catch (error) {
                    console.error("Network error:", error);
                    showToast("Network error. Please check your connection and try again.", "error");
                } finally {
                    // Re-enable submit button
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = "Reset Password";
                }
            });
        });
    </script>    
</body>
</html>